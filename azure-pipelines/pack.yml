parameters:
- name: signArtifacts
  type: boolean

steps:
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download Windows binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-Windows
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download Linux binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-Linux
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download android binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-android
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download macOS binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-macOS

- pwsh: src/nerdbank-zcash-rust/Generate-3rdPartyNotices.ps1
  displayName: 🪪 3rd party licenses

- script: dotnet pack --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack_x64.binlog"
  displayName: 🛠 pack
  workingDirectory: azure-pipelines

- pwsh: |
    # Workaround AzP error
    Write-Host "##[command]dotnet workload restore"
    dotnet workload restore

    $publishArgs = @()
    # The binlog will unfortunately capture the password, whatever we do,
    # don't leak the .keystore file content itself as well.
    # We avoid this by NOT using environment variables to store the keystore file content in any way.
    if ('${{ parameters.signArtifacts }}' -eq 'true') {
      Write-Host 'App bundle will be signed for uploading to the Google Play store.'
      $AndroidKeyStorePath = '$(Agent.TempDirectory)/android.keystore'
      $androidKeyStoreBase64 = '$(AndroidKeyStore)'
      Set-Content -Path $AndroidKeyStorePath -Value ([Convert]::FromBase64String($androidKeyStoreBase64)) -AsByteStream
      $publishArgs += "-p:AndroidSigningKeyStore=`"$AndroidKeyStorePath`""
      $publishArgs += '-p:AndroidKeyStore=true'
      $publishArgs += '-p:AndroidSigningKeyAlias=uploadkey'
      $publishArgs += '-p:AndroidSigningKeyPass="$(AndroidKeyStorePass)"'
      $publishArgs += '-p:AndroidSigningStorePass="$(AndroidKeyStorePass)"'
    } else {
      Write-Host 'App bundle will NOT be signed for uploading to the Google Play store.'
    }
    $publishArgs += '-bl:"$(Build.ArtifactStagingDirectory)/build_logs/publish_android.binlog"'
    Write-Host "##[command]dotnet publish $publishArgs"
    dotnet publish @publishArgs
  displayName: 🛠️️ android app bundle
  workingDirectory: src/Nerdbank.Zcash.App/Nerdbank.Zcash.App.Android

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: 📢 Publish artifacts
  condition: succeededOrFailed()

- powershell: dotnet nuget push 'bin\Packages\$(BuildConfiguration)\NuGet\*.nupkg' -s $(ci_feed) -k azdo --skip-duplicate
  displayName: 📦 Push packages to CI feed
  condition: and(succeeded(), ne(variables['ci_feed'], ''), ne(variables['Build.Reason'], 'PullRequest'))
