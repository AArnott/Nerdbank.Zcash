steps:
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download Windows code coverage results
  inputs:
    buildType: current
    targetPath: obj/src/nerdbank-zcash-rust
    artifactName: rust-Windows
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download Linux code coverage results
  inputs:
    buildType: current
    targetPath: obj/src/nerdbank-zcash-rust
    artifactName: rust-Linux
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download macOS code coverage results
  inputs:
    buildType: current
    targetPath: obj/src/nerdbank-zcash-rust
    artifactName: rust-macOS

- script: dotnet build -t:build,pack -p:Platform=x64 --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack_x64.binlog"
  displayName: ðŸ›  build (x64)

- script: dotnet build -t:build,pack -p:Platform=arm64 --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack_arm64.binlog"
  displayName: ðŸ›  build (arm64)

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: ðŸ“¢ Publish artifacts
  condition: succeededOrFailed()

- powershell: dotnet nuget push 'bin/Packages/$(BuildConfiguration)/*.nupkg' -s $(ci_feed) -k azdo --skip-duplicate
  displayName: ðŸ“¦ Push packages to CI feed
  condition: and(succeeded(), ne(variables['ci_feed'], ''), ne(variables['Build.Reason'], 'PullRequest'))
