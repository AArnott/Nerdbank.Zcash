steps:
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download Windows binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-Windows
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download Linux binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-Linux
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download android binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-android
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download macOS binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-zcash-rust/target
    artifactName: rust-macOS
- task: DownloadPipelineArtifact@2
  displayName: 🔻 Download ios_framework binaries
  inputs:
    buildType: current
    targetPath: bin/release/nerdbank_zcash_rust.xcframework
    artifactName: ios_framework-macOS

- pwsh: src/nerdbank-zcash-rust/Generate-3rdPartyNotices.ps1
  displayName: 🪪 3rd party licenses

- script: dotnet pack --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: 🛠 pack
  workingDirectory: azure-pipelines

- pwsh: >
    dotnet tool install --tool-path obj SignClient

    obj/SignClient sign
    --baseDirectory '$(System.DefaultWorkingDirectory)/bin/Packages/$(BuildConfiguration)'
    --input '**/*'
    --config '$(System.DefaultWorkingDirectory)/azure-pipelines/SignClient.json'
    --filelist '$(System.DefaultWorkingDirectory)/azure-pipelines/signfiles.txt'
    --user '$(codesign_username)'
    --secret '$(codesign_secret)'
    --name 'Nerdbank.Cryptocurrencies'
    --descriptionUrl 'https://github.com/nerdcash/Nerdbank.Cryptocurrencies'
  displayName: 🔏 Code sign
  condition: and(succeeded(), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), ne(variables['Build.Reason'], 'PullRequest'))

- publish: bin/Packages/$(BuildConfiguration)
  artifact: deployables
  displayName: 📢 Publish deployables

- powershell: dotnet nuget push 'bin\Packages\$(BuildConfiguration)\NuGet\*.nupkg' -s $(ci_feed) -k azdo --skip-duplicate
  displayName: 📦 Push packages to CI feed
  condition: and(succeeded(), ne(variables['ci_feed'], ''), ne(variables['Build.Reason'], 'PullRequest'))
