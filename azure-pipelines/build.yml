parameters:
- name: windowsPool
  type: object
  default:
    vmImage: windows-2022
- name: RunTests
  type: boolean
  default: true
- name: BaseChannelName
  type: string
  default: ''
- name: desktopAppAgents
  type: object
  default:
  - Windows_velopack
  - Linux
  - macOS_velopack
- name: publishPlatforms
  type: object
  default:
  - x64
  - ARM64

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

  - script: dotnet nbgv cloud -c
    displayName: ‚öô Set build number

  - template: cargo.yml
    parameters:
      test_target: x86_64-pc-windows-msvc
      RunTests: ${{ parameters.RunTests }}

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: win
      publishPlatforms: ${{ parameters.publishPlatforms }}

- job: Windows_velopack
  displayName: Windows velopack
  dependsOn: Windows
  pool: ${{ parameters.windowsPool }}
  steps:
  - template: velopack.yml
    parameters:
      osRID: win
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}
      BuildJobName: Windows

- job: Linux
  pool:
    vmImage: Ubuntu 20.04
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

  - template: cargo.yml
    parameters:
      test_target: x86_64-unknown-linux-gnu
      RunTests: ${{ parameters.RunTests }}
      checks: true

  - pwsh: cargo install cross --git https://github.com/cross-rs/cross --rev c87a52a60dbcde069714a8d2ed51570e7fc23cf9
    displayName: ‚öôÔ∏è install cross

  - pwsh: cross build -r --target=aarch64-unknown-linux-gnu
    displayName: üõ†Ô∏è build linux-arm64
    workingDirectory: src/nerdbank-zcash-rust

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: linux
      publishPlatforms: ${{ parameters.publishPlatforms }}

  - template: velopack.yml
    parameters:
      osRID: linux
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}

  - script: dotnet format --verify-no-changes --no-restore
    displayName: üíÖ Verify formatted code
    enabled: false # TODO: enable this once we've solved the issue with uniffi C# emitted code formatting

- job: android
  displayName: android
  pool:
    vmImage: Ubuntu 20.04
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    submodules: true

  - template: android.yml

- job: macOS
  pool:
    vmImage: macOS-12
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

  - template: cargo.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      test_target: x86_64-apple-darwin

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: osx
      publishPlatforms: ${{ parameters.publishPlatforms }}

- job: macOS_velopack
  displayName: macOS velopack
  dependsOn: macOS
  pool:
    vmImage: macOS-12
  variables:
  - group: Apple signing
  steps:
  - bash: |
      # create variables for file paths
      CERT_BUILD_PATH=$AGENT_TEMPDIRECTORY/build_certificate.p12
      CERT_INSTALLER_PATH=$AGENT_TEMPDIRECTORY/installer_certificate.p12
      KEYCHAIN_PATH=$AGENT_TEMPDIRECTORY/app-signing.keychain-db

      # import certificates from secrets
      echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERT_BUILD_PATH
      echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $CERT_INSTALLER_PATH

      # create temporary keychain
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      # import certificates to keychain
      security import $CERT_BUILD_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security import $CERT_INSTALLER_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychain -d user -s $KEYCHAIN_PATH

      # create notarytool profile
      xcrun notarytool store-credentials --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM" --password "$APPLE_PASSWORD" --keychain $KEYCHAIN_PATH velopack-profile
    env:
      BUILD_CERTIFICATE_BASE64: $(BUILD-CERTIFICATE-BASE64)
      INSTALLER_CERTIFICATE_BASE64: $(INSTALLER-CERTIFICATE-BASE64)
      P12_PASSWORD: $(P12-PASSWORD)
      APPLE_ID: $(APPLE-ID)
      APPLE_PASSWORD: $(APPLE-PASSWORD)
      APPLE_TEAM: $(APPLE-TEAM)
      KEYCHAIN_PASSWORD: $(KEYCHAIN-PASSWORD)
    displayName: üõ†Ô∏è Install Apple certs and notary profile

  - template: velopack.yml
    parameters:
      osRID: osx
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}
      BuildJobName: macOS

  - bash: security delete-keychain $AGENT_TEMPDIRECTORY/app-signing.keychain-db
    displayName: üßπ Clean up keychain
    condition: always()

- job: Pack
  displayName: dotnet pack
  dependsOn:
  - Windows
  - Linux
  - macOS
  - android
  pool:
    vmImage: Ubuntu 20.04
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true
  - template: install-dependencies.yml
  - template: pack.yml

- ${{ if ne(parameters.BaseChannelName, '') }}:
  - job: Publish
    dependsOn: ${{ parameters.desktopAppAgents }}
    variables:
    - group: eZcash App Updates storage
    pool:
      vmImage: Ubuntu 20.04
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
    - template: install-dependencies.yml
    - template: publish.yml
      parameters:
        agents: ${{ parameters.desktopAppAgents }}

- job: WrapUp
  dependsOn:
  - Windows
  - Linux
  - macOS
  pool: ${{ parameters.windowsPool }} # Use Windows agent because PublishSymbols task requires it (https://github.com/microsoft/azure-pipelines-tasks/issues/13821).
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    submodules: false
  - template: install-dependencies.yml
    parameters:
      initArgs: -NoRestore
  - template: publish-symbols.yml
  - ${{ if parameters.RunTests }}:
    - template: publish-codecoverage.yml
