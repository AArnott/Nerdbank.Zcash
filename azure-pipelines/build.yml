parameters:
- name: signArtifacts
  type: boolean
  default: false
- name: windowsPool
  type: object
  default:
    name: CustomAgents
    demands:
    - Agent.OS -equals Windows_NT
- name: RunTests
  type: boolean
  default: true
- name: BaseChannelName
  type: string
  default: ''
- name: GooglePlayTrack
  type: string
  default: ''
- name: AppleStoreReady
  type: boolean
  default: false
- name: desktopAppAgents
  type: object
  default:
  - Windows_velopack
  - Linux
  - macOS_velopack
- name: publishPlatforms
  type: object
  default:
  - x64
  - ARM64

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

    # For optimizing Blazor WebAssembly builds
  - script: dotnet workload install wasm-tools
    displayName: ‚öô Install wasm-tools

  - script: dotnet nbgv cloud -c
    displayName: ‚öô Set build number

  - template: cargo.yml
    parameters:
      test_target: x86_64-pc-windows-msvc
      RunTests: ${{ parameters.RunTests }}

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: win
      publishPlatforms: ${{ parameters.publishPlatforms }}
      signArtifacts: ${{ parameters.signArtifacts }}

- job: Windows_velopack
  displayName: Windows velopack
  dependsOn: Windows
  pool: ${{ parameters.windowsPool }}
  steps:
  - template: velopack.yml
    parameters:
      signArtifacts: ${{ parameters.signArtifacts }}
      osRID: win
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}
      BuildJobName: Windows

- job: Linux
  pool:
    name: CustomAgents
    demands:
    - Agent.OS -equals Linux
    - HasDockerAccess
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

  - template: cargo.yml
    parameters:
      test_target: x86_64-unknown-linux-gnu
      RunTests: ${{ parameters.RunTests }}
      checks: true

  - pwsh: cargo binstall -y cross@0.2.5
    displayName: ‚öôÔ∏è install cross

  - pwsh: |
      Remove-Item -Recurse -Force target/release # cross build fails if this directory has files from prior steps. I don't know why it even exists.
      cross build -r --target=aarch64-unknown-linux-gnu
    displayName: üõ†Ô∏è build linux-arm64
    workingDirectory: src/nerdbank-zcash-rust

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: linux
      publishPlatforms: ${{ parameters.publishPlatforms }}
      signArtifacts: ${{ parameters.signArtifacts }}

  - template: velopack.yml
    parameters:
      signArtifacts: ${{ parameters.signArtifacts }}
      osRID: linux
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}

  - script: dotnet format --verify-no-changes --no-restore
    displayName: üíÖ Verify formatted code
    enabled: false # TODO: enable this once we've solved the issue with uniffi C# emitted code formatting

- job: android
  displayName: android
  pool:
    name: CustomAgents
    demands:
    - Agent.OS -equals Linux
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    submodules: true

  - template: android.yml

- job: macOS
  pool:
    name: CustomAgents
    demands:
    - Agent.OS -equals Darwin
  variables:
  - group: Apple signing
  - name: DEVELOPER_DIR
    value: /Applications/Xcode_16.app/Contents/Developer

  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true

  - template: install-dependencies.yml

  - script: |
      xcode-select -p
      xcodebuild -version
    displayName: üçé Print Xcode version

  - ${{ if parameters.AppleStoreReady }}:
    - task: DownloadSecureFile@1
      name: dsfAppleCert
      displayName: üçé Download App Store certificate
      inputs:
        secureFile: Apple_App_Store_distribution.p12

    - task: DownloadSecureFile@1
      name: dsfProvisioningProfile
      displayName: üçé Download App Store profile
      inputs:
        secureFile: eZcash_App_Store_distribution.mobileprovision

  - ${{ else }}:
    - task: DownloadSecureFile@1
      name: dsfAppleCert
      displayName: üçé Download dev certificate
      inputs:
        secureFile: Apple_Development.p12

    - task: DownloadSecureFile@1
      name: dsfProvisioningProfile
      displayName: üçé Download dev profile
      inputs:
        secureFile: Nonshipping_PR_builds.mobileprovision

  - bash: |
      # Log the public certificate details
      /opt/homebrew/bin/openssl pkcs12 -in $(dsfAppleCert.secureFilePath) -nokeys -passin pass:$P12_PASSWORD -legacy | /opt/homebrew/bin/openssl x509 -sha1 -noout -fingerprint -subject -dates -nameopt utf8,sep_semi_plus_space

      KEYCHAIN_PATH=$AGENT_TEMPDIRECTORY/app-signing.keychain-db
      if [ "${{ parameters.AppleStoreReady }}" = "True" ]; then
        CodesignProvision="eZcash App Store distribution"
        CodesignKey="Apple Distribution: Andrew Arnott (6B9NEABBFE)"
      else
        CodesignProvision="Non-shipping PR builds"
        CodesignKey="Apple Development: Andrew Arnott (WFT82492ZR)"
      fi

      # create temporary keychain
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      # import certificates to keychain
      security import $(dsfAppleCert.secureFilePath) -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychain -d user -s $KEYCHAIN_PATH

      echo "Setting CodesignKeychain env var to '$KEYCHAIN_PATH'"
      echo "##vso[task.setvariable variable=CodesignKeychain]$KEYCHAIN_PATH"

      echo "Setting CodesignKey env var to '$CodesignKey'"
      echo "##vso[task.setvariable variable=CodesignKey]$CodesignKey"

      echo "Copying $(dsfProvisioningProfile.secureFilePath) to '~/Library/MobileDevice/Provisioning Profiles'"
      mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      cp "$(dsfProvisioningProfile.secureFilePath)" ~/Library/MobileDevice/Provisioning\ Profiles

      echo "Setting CodesignProvision env var to '$CodesignProvision'"
      echo "##vso[task.setvariable variable=CodesignProvision]$CodesignProvision"
    displayName: üçé Install certs & profiles
    env:
      P12_PASSWORD: $(P12-PASSWORD)
      KEYCHAIN_PASSWORD: $(KEYCHAIN-PASSWORD)

  - template: cargo.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      test_target: x86_64-apple-darwin

  - pwsh: |
      Write-Host "##[command]./azure-pipelines/build_ios_framework.ps1"
      ./azure-pipelines/build_ios_framework.ps1
    displayName: üì± iOS Framework

  - pwsh: |
      $version = dotnet nbgv get-version -v SimpleVersion
      $plist = Get-Content Info.plist
      $plist = $plist.Replace('$version$', $version)
      Set-Content -Path Info.plist -Value $plist -Encoding utf8NoBOM
      Write-Host $plist
    displayName: üçé Stamp Info.plist version
    workingDirectory: src/Nerdbank.Zcash.App/Nerdbank.Zcash.App.iOS

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
      osRID: osx
      publishPlatforms: ${{ parameters.publishPlatforms }}
      signArtifacts: ${{ parameters.signArtifacts }}

  - pwsh: |
      $provisioningProfileFileName = Split-Path '$(dsfProvisioningProfile.secureFilePath)' -Leaf
      $provisioningProfileFilePath = Join-Path "~/Library/MobileDevice/Provisioning Profiles" $provisioningProfileFileName
      if (Test-Path $provisioningProfileFilePath) {
        Write-Host "Removing $provisioningProfileFilePath"
        Remove-Item $provisioningProfileFilePath
      } else {
        Write-Host "$provisioningProfileFilePath not found."
      }
    displayName: üßπ Clean up provisioning profile
    condition: always()

- job: macOS_velopack
  displayName: macOS velopack
  dependsOn: macOS
  pool:
    name: CustomAgents
    demands:
    - Agent.OS -equals Darwin
  variables:
  - group: Apple signing
  steps:
  - ${{ if parameters.signArtifacts }}:
    - task: DownloadSecureFile@1
      name: dsfBuildCert
      displayName: üçé Download build certificate
      inputs:
        secureFile: apple_build_certificate.p12

    - task: DownloadSecureFile@1
      name: dsfInstallerCert
      displayName: üçé Download installer certificate
      inputs:
        secureFile: apple_installer_certificate.p12

  - bash: |
      KEYCHAIN_PATH=$AGENT_TEMPDIRECTORY/app-signing.keychain-db

      # create temporary keychain
      security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      # import certificates to keychain
      security import $(dsfBuildCert.secureFilePath) -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security import $(dsfInstallerCert.secureFilePath) -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      security list-keychain -d user -s $KEYCHAIN_PATH

      # create notarytool profile
      xcrun notarytool store-credentials --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM" --password "$APPLE_PASSWORD" --keychain $KEYCHAIN_PATH velopack-profile
    env:
      P12_PASSWORD: $(P12-PASSWORD)
      APPLE_ID: $(APPLE-ID)
      APPLE_PASSWORD: $(APPLE-PASSWORD)
      APPLE_TEAM: $(APPLE-TEAM)
      KEYCHAIN_PASSWORD: $(KEYCHAIN-PASSWORD)
    displayName: üçé Install certs and notary profile
    condition: and(succeeded(), eq('${{ parameters.signArtifacts }}', 'true'))

  - template: velopack.yml
    parameters:
      signArtifacts: ${{ parameters.signArtifacts }}
      osRID: osx
      BaseChannelName: ${{ parameters.BaseChannelName }}
      publishPlatforms: ${{ parameters.publishPlatforms }}
      BuildJobName: macOS

  - bash: security delete-keychain $AGENT_TEMPDIRECTORY/app-signing.keychain-db
    displayName: üßπ Clean up keychain
    condition: eq('${{ parameters.signArtifacts }}', 'true')

- job: Pack
  displayName: dotnet pack
  dependsOn:
  - Windows
  - Linux
  - macOS
  - android
  pool: ${{ parameters.windowsPool }} # Must not be linux because linux cannot build net8.0-ios targets.
  variables:
  - group: Android signing
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
    submodules: true
  - template: install-dependencies.yml
  - template: pack.yml
    parameters:
      signArtifacts: ${{ parameters.signArtifacts }}

- ${{ if ne(parameters.BaseChannelName, '') }}:
  - job: Publish
    displayName: Publish desktop apps
    dependsOn: ${{ parameters.desktopAppAgents }}
    variables:
    - group: eZcash App Updates storage
    pool:
      vmImage: Ubuntu 20.04
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
    - template: install-dependencies.yml
    - template: publish_desktopApps.yml
      parameters:
        agents: ${{ parameters.desktopAppAgents }}

- ${{ if ne(parameters.GooglePlayTrack, '') }}:
  - job: PublishAndroid
    displayName: Publish Google Play Store
    dependsOn: Pack
    pool:
      vmImage: Ubuntu 20.04
    steps:
    - template: publish_android.yml
      parameters:
        GooglePlayTrack: ${{ parameters.GooglePlayTrack }}

- job: WrapUp
  dependsOn:
  - Windows
  - Linux
  - macOS
  pool: # use Hosted here so it can run in parallel with the Windows velopack job
    vmImage: windows-2022 # Use Windows agent because PublishSymbols task requires it (https://github.com/microsoft/azure-pipelines-tasks/issues/13821).
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    submodules: false
  - template: install-dependencies.yml
    parameters:
      initArgs: -NoRestore
  - template: publish-symbols.yml
  - ${{ if parameters.RunTests }}:
    - template: publish-codecoverage.yml
