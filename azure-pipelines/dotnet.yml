parameters:
- name: RunTests
- name: BaseChannelName
- name: osRID
  type: string
- name: publishPlatforms
  type: object
  default:
  - x64
  - ARM64

steps:

- script: dotnet build --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: üõ†Ô∏è dotnet build

- powershell: azure-pipelines/dotnet-test-cloud.ps1 -Configuration $(BuildConfiguration) -Agent $(Agent.JobName) -PublishResults
  displayName: üß™ dotnet test
  condition: and(succeeded(), ${{ parameters.RunTests }})

- ${{ each platform in parameters.publishPlatforms }}:
  - pwsh: |
      $platform = '${{ platform }}'.ToLower()
      $publishCommand = @(
        'publish',
        '-c','$(BuildConfiguration)',
        "-p:Platform=$platform",
        '-r',"${{ parameters.osRID }}-$platform",
        '-warnaserror',
        '-bl:"$(Build.ArtifactStagingDirectory)/build_logs/publish_${{ platform }}.binlog"'
      )
      if ('${{ parameters.osRID }}' -eq 'win') {
        $tfm = 'net8.0-windows10.0.22621.0'
      } else {
        $publishCommand += '--self-contained'
        $tfm = 'net8.0'
      }
      $publishCommand += '-f',$tfm
      Write-Host "##[command]$pwd $ dotnet $publishCommand"
      dotnet @publishCommand
      Write-Host "##vso[task.setvariable variable=tfm;]$tfm"
    displayName: üõ†Ô∏èÔ∏è dotnet publish ${{ platform }}
    workingDirectory: src/Nerdbank.Zcash.App/Nerdbank.Zcash.App.Desktop

  - pwsh: |
      $platform = '${{ platform }}'.ToLower()
      $rid = '${{ parameters.osRID }}-${{ platform }}'.ToLower()
      $VelopackData = Get-Content -Path "obj/src/Nerdbank.Zcash.App/Nerdbank.Zcash.App.Desktop/$platform/$(BuildConfiguration)/$(tfm)/$rid/velopack-data.json" | ConvertFrom-Json
      $packageVersion = dotnet nbgv get-version -v SemVer2
      $OutputDir = 'bin/Packages/$(BuildConfiguration)/velopack'
      $BaseChannelName = '${{ parameters.BaseChannelName }}'
      $WillPublish = !!$BaseChannelName
      if (!$WillPublish) {
        $BaseChannelName = 'unpublished' # We won't publish this, but we should build some reasonable channel name for logging.
      }
      $Channel = "$BaseChannelName-$rid"
      Write-Host "##[section]Creating velopack for channel $Channel..."

      if ($WillPublish) {
        $vpkCommand = @(
          'vpk','download','http',
          '--url',$VelopackData.url,
          '--outputDir',$OutputDir
          '--channel',$Channel
        )
        Write-Host "##[command]$pwd $ dotnet $vpkCommand"
        dotnet @vpkCommand
        if ($LastExitCode -ne 0) {
          Write-Host "##[warning]Failed to download most recent release for the channel. This is expected if this is the first release for the channel."
        }
      }

      $vpkCommand = @(
        'vpk','pack',
        '--packVersion', $packageVersion,
        '--channel', $Channel,
        '--packId', 'Nerdbank.Zcash.App',
        '--packTitle', 'eZcash',
        '--packAuthors', 'Nerdbank',
        '--mainExe', $VelopackData.exeName,
        '--packDir', "bin/publish/$(BuildConfiguration)/$rid",
        '--outputDir', $OutputDir
        '--runtime', $rid
      )
      if ('${{ parameters.osRID }}' -eq 'win') {
        $vpkCommand += '--framework', "$($VelopackData.runtime)-${{ platform }}-desktop".ToLower()
      }
      Write-Host "##[command]$pwd $ dotnet $vpkCommand"
      dotnet @vpkCommand
    displayName: üì¶ Build ${{ platform }} app package

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: ‚öô Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: üì¢ Publish artifacts
  condition: succeededOrFailed()

- ${{ if and(ne(variables['codecov_token'], ''), parameters.RunTests) }}:
  - powershell: |
      $ArtifactStagingFolder = & "azure-pipelines/Get-ArtifactsStagingDirectory.ps1"
      $CoverageResultsFolder = Join-Path $ArtifactStagingFolder "coverageResults-$(Agent.JobName)"
      azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "$(codecov_token)" -PathToCodeCoverage "$CoverageResultsFolder" -Name "$(Agent.JobName) Coverage Results" -Flags "$(Agent.JobName)Host,$(BuildConfiguration)"
    displayName: üì¢ Publish code coverage results to codecov.io
    timeoutInMinutes: 3
    continueOnError: true
