parameters:
- name: RunTests
- name: osRID
  type: string
- name: publishPlatforms
  type: object

steps:

- pwsh: |
    $addlArgs = @()
    if (($env:PROCESSOR_ARCHITECTURE -eq "ARM64") -or ((Get-Command uname -ErrorAction SilentlyContinue) -and (uname -m) -eq 'arm64')) {
      $addlArgs += '-p:Platform=arm64'
    }
    dotnet build --no-restore -c $(BuildConfiguration) @addlArgs -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: üõ†Ô∏è dotnet build

- powershell: azure-pipelines/dotnet-test-cloud.ps1 -Configuration $(BuildConfiguration) -Agent $(Agent.JobName) -PublishResults
  displayName: üß™ dotnet test
  condition: and(succeeded(), ${{ parameters.RunTests }})

- ${{ each platform in parameters.publishPlatforms }}:
  - pwsh: |
      $platform = '${{ platform }}'.ToLower()
      $publishCommand = @(
        'publish',
        '-c','$(BuildConfiguration)',
        "-p:Platform=$platform",
        '-r',"${{ parameters.osRID }}-$platform",
        '--self-contained',
        '-warnaserror',
        '-bl:"$(Build.ArtifactStagingDirectory)/build_logs/publish_${{ platform }}.binlog"'
      )
      if ('${{ parameters.osRID }}' -eq 'win') {
        $tfm = 'net8.0-windows10.0.22621.0'
      } else {
        $tfm = 'net8.0'
      }
      $publishCommand += '-f',$tfm
      Write-Host "##[command]$pwd $ dotnet $publishCommand"
      dotnet @publishCommand
    displayName: üõ†Ô∏èÔ∏è dotnet publish ${{ platform }}
    workingDirectory: src/Nerdbank.Zcash.App/Nerdbank.Zcash.App.Desktop

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: ‚öô Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: üì¢ Publish artifacts
  condition: succeededOrFailed()

- ${{ if and(ne(variables['codecov_token'], ''), parameters.RunTests) }}:
  - powershell: |
      $ArtifactStagingFolder = & "azure-pipelines/Get-ArtifactsStagingDirectory.ps1"
      $CoverageResultsFolder = Join-Path $ArtifactStagingFolder "coverageResults-$(Agent.JobName)"
      azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "$(codecov_token)" -PathToCodeCoverage "$CoverageResultsFolder" -Name "$(Agent.JobName) Coverage Results" -Flags "$(Agent.JobName)Host,$(BuildConfiguration)"
    displayName: üì¢ Publish code coverage results to codecov.io
    timeoutInMinutes: 3
    continueOnError: true
