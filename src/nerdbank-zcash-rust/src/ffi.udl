[Error]
interface LightWalletError {
	InvalidArgument(string message);
	InvalidUri();
	SqliteClientError(string message);
	Canceled();
	Other(string message);
};

enum ChainType {
	"Testnet",
	"Mainnet",
};

dictionary AccountInfo {
	u32 id;
	string? uvk;
	BirthdayHeights birthday_heights;
};

dictionary Transaction {
	bytes txid;
	timestamp? block_time;
	u32? mined_height;
	boolean expired_unmined;
	i64 account_balance_delta;
	u64 fee;
	sequence<TransactionSendDetail> outgoing;
	sequence<TransparentNote> incoming_transparent;
	sequence<ShieldedNote> incoming_shielded;
};

dictionary TransparentNote {
	u64 value;
	string recipient;
};

dictionary ShieldedNote {
	u64 value;
	bytes memo;
	string recipient;
	boolean is_change;
};

dictionary TransactionSendDetail {
	u64 value;
	bytes? memo;
	string recipient;
};

dictionary UserBalances {
	u64 spendable;
	u64 immature_change;
	u64 minimum_fees;
	u64 immature_income;
	u64 dust;
	u64 incoming;
	u64 incoming_dust;
};

dictionary BirthdayHeights {
	u32 original_birthday_height;
	u32 birthday_height;
	u32? rebirth_height;
};

dictionary SyncResult {
	u64 latest_block;
};

dictionary DbInit {
	string data_file;
	ChainType network;
};

dictionary SendTransactionResult {
	bytes txid;
};

dictionary SyncUpdateData {
	u64 current;
	u64 total;
	string? last_error;
};

callback interface SyncUpdate {
	void update_status(SyncUpdateData data);
	void report_transactions(sequence<Transaction> transactions);
};

callback interface CancellationSource {
	void set_cancellation_id(u32 id);
};

namespace LightWallet {
	[Throws=LightWalletError]
	void cancel(u32 id);

	[Throws=LightWalletError]
	void init(DbInit config);

	[Throws=LightWalletError]
	u32 add_account(DbInit config, string uri, bytes seed, u32? birthday_height, CancellationSource? cancellation);

	[Throws=LightWalletError]
	sequence<AccountInfo> get_accounts(DbInit config);

	/// Gets the oldest birthday height for any account in the wallet.
	[Throws=LightWalletError]
	u32? get_birthday_height(DbInit config);

	[Throws=LightWalletError]
	u32 get_block_height(string uri, CancellationSource? cancellation);

	[Throws=LightWalletError]
	u32? get_sync_height(DbInit config);

	[Throws=LightWalletError]
	SyncResult sync(DbInit config, string uri, SyncUpdate? progress, CancellationSource? cancellation);

	[Throws=LightWalletError]
	boolean disconnect_server(string uri);

	[Throws=LightWalletError]
	SendTransactionResult send(DbInit config, string uri, bytes usk, u32 min_confirmations, sequence<TransactionSendDetail> send_details);

	[Throws=LightWalletError]
	sequence<TransparentNote> get_unshielded_utxos(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	SendTransactionResult shield(DbInit config, string uri, bytes usk, string address);

	[Throws=LightWalletError]
	sequence<Transaction> get_transactions(DbInit config, u32 account_id, u32 starting_block);

	[Throws=LightWalletError]
	UserBalances get_user_balances(DbInit config, u32 account_id, u32 min_confirmations);

	[Throws=LightWalletError]
	BirthdayHeights get_birthday_heights(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	string add_diversifier(DbInit config, u32 account_id, bytes diversifier_index);
};
