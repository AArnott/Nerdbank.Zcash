[Error]
enum LightWalletError {
	"InvalidUri",
	"SqliteClientError",
	"Other",
};

enum ChainType {
	"Testnet",
	"Mainnet",
};

dictionary WalletInfo {
	string? ufvk;
	bytes? unified_spending_key;
	u64 birthday_height;
};

dictionary Transaction {
	bytes txid;
	timestamp datetime;
	u32? mined_height;
	boolean expired_unmined;
	u64 account_balance_delta;
	u64 spent;
	u64 received;
	u64 fee;
	f64? price;
	sequence<TransactionSendDetail> sends;
	sequence<SaplingNote> sapling_notes;
	sequence<OrchardNote> orchard_notes;
};

dictionary SaplingNote {
	u64 value;
	bytes memo;
	boolean is_change;
	bytes recipient;
};

dictionary OrchardNote {
	u64 value;
	bytes memo;
	boolean is_change;
	bytes recipient;
};

dictionary TransactionSendDetail {
	string to_address;
	u64 value;
	bytes memo;
};

dictionary UserBalances {
	u64 spendable;
	u64 immature_change;
	u64 minimum_fees;
	u64 immature_income;
	u64 dust;
	u64 incoming;
	u64 incoming_dust;
};

dictionary BirthdayHeights {
	u64 original_birthday_height;
	u64 birthday_height;
	u64? rebirth_height;
};

dictionary SyncResult {
	u64 tip_height;
};

dictionary DbInit {
	string data_file;
	ChainType network;
};

namespace LightWallet {
	[Throws=LightWalletError]
	void lightwallet_init(DbInit config);

	[Throws=LightWalletError]
	u32? lightwallet_get_birthday_height(DbInit config);

	[Throws=LightWalletError]
	u32 lightwallet_get_block_height(string uri);

	[Throws=LightWalletError]
	u32? lightwallet_get_sync_height(DbInit config);

	[Throws=LightWalletError]
	SyncResult lightwallet_sync(DbInit config, string uri);

	[Throws=LightWalletError]
	boolean lightwallet_disconnect_server(string uri);

	[Throws=LightWalletError]
	sequence<Transaction> lightwallet_get_transactions(DbInit config, u32 account_id, u32 starting_block);
};
