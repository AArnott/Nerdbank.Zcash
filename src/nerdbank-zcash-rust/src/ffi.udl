[Error]
interface LightWalletError {
	InvalidArgument(string message);
	InvalidUri();
	SqliteClientError(string message);
	Other(string message);
};

enum ChainType {
	"Testnet",
	"Mainnet",
};

dictionary WalletInfo {
	string? ufvk;
	bytes? unified_spending_key;
	u64 birthday_height;
};

dictionary Transaction {
	bytes txid;
	timestamp block_time;
	u32? mined_height;
	boolean expired_unmined;
	u64 account_balance_delta;
	u64 fee;
	sequence<TransactionSendDetail> outgoing;
	sequence<TransparentNote> incoming_transparent;
	sequence<ShieldedNote> incoming_shielded;
};

dictionary TransparentNote {
	u64 value;
	string recipient;
};

dictionary ShieldedNote {
	u64 value;
	bytes memo;
	string recipient;
	boolean is_change;
};

dictionary TransactionSendDetail {
	u64 value;
	bytes? memo;
	string recipient;
};

dictionary UserBalances {
	u64 spendable;
	u64 immature_change;
	u64 minimum_fees;
	u64 immature_income;
	u64 dust;
	u64 incoming;
	u64 incoming_dust;
};

dictionary BirthdayHeights {
	u32 original_birthday_height;
	u32 birthday_height;
	u32? rebirth_height;
};

dictionary SyncResult {
	u64 latest_block;
};

dictionary DbInit {
	string data_file;
	ChainType network;
};

dictionary SendTransactionResult {
	bytes txid;
};

namespace LightWallet {
	[Throws=LightWalletError]
	void lightwallet_init(DbInit config);

	[Throws=LightWalletError]
	u32 lightwallet_add_account(DbInit config, string uri, bytes seed, u32? birthday_height);

	[Throws=LightWalletError]
	u32? lightwallet_get_birthday_height(DbInit config);

	[Throws=LightWalletError]
	u32 lightwallet_get_block_height(string uri);

	[Throws=LightWalletError]
	u32? lightwallet_get_sync_height(DbInit config);

	[Throws=LightWalletError]
	SyncResult lightwallet_sync(DbInit config, string uri);

	[Throws=LightWalletError]
	boolean lightwallet_disconnect_server(string uri);

	[Throws=LightWalletError]
	SendTransactionResult lightwallet_send(DbInit config, string uri, bytes usk, u32 min_confirmations, sequence<TransactionSendDetail> send_details);

	[Throws=LightWalletError]
	sequence<TransparentNote> lightwallet_get_unshielded_utxos(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	SendTransactionResult lightwallet_shield(DbInit config, string uri, bytes usk, string address);

	[Throws=LightWalletError]
	sequence<Transaction> lightwallet_get_transactions(DbInit config, u32 account_id, u32 starting_block);

	[Throws=LightWalletError]
	UserBalances lightwallet_get_user_balances(DbInit config, u32 account_id, u32 min_confirmations);

	[Throws=LightWalletError]
	BirthdayHeights lightwallet_get_birthday_heights(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	string lightwallet_add_diversifier(DbInit config, u32 account_id, bytes diversifier_index);
};
