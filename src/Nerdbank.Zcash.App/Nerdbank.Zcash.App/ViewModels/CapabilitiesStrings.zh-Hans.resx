<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CanReceiveColumnHeader" xml:space="preserve">
    <value>可以接收</value>
  </data>
  <data name="CanSpendColumnHeader" xml:space="preserve">
    <value>可以花费</value>
  </data>
  <data name="CapabilitiesHeading" xml:space="preserve">
    <value>功能</value>
  </data>
  <data name="InternalKeys_Description" xml:space="preserve">
    <value>这保护了传入查看密钥（IVK）的完整性，使其无法查看任何花费交易的任何部分。具有此功能的钱包在花费或保护资金后，不具备此功能的钱包将无法看到完整的账户余额。</value>
  </data>
  <data name="InternalKeys_Title" xml:space="preserve">
    <value>用于保护和找零的内部密钥</value>
  </data>
  <data name="MultiAccountSourcedTransactions_Description" xml:space="preserve">
    <value>多个帐户可以为单个交易提供资金。这是Zecwallet Lite的支持，这是Zcash地址不当表现的一部分，不建议您进行。涉及此类交易的ZCASH帐户可能无法在不支持此功能的钱包应用程序（例如这个）中正确显示交易记录。</value>
  </data>
  <data name="MultiAccountSourcedTransactions_Title" xml:space="preserve">
    <value>多学院来源交易</value>
  </data>
  <data name="MultipleAccounts_Description" xml:space="preserve">
    <value>在记住或备份单个种子短语的同时，为支出和储蓄账户使用不同的账户。</value>
  </data>
  <data name="MultipleAccounts_Title" xml:space="preserve">
    <value>单个种子短语的多个账户</value>
  </data>
  <data name="Multispend_Description" xml:space="preserve">
    <value>减少多个花费之间的网络费用和强制等待时间。</value>
  </data>
  <data name="Multispend_Title" xml:space="preserve">
    <value>多个收件人的花费</value>
  </data>
  <data name="PoolBalancing_Description" xml:space="preserve">
    <value>通过减少交易（或其中一部分）的价值公开可见性来增强隐私。</value>
  </data>
  <data name="PoolBalancing_Title" xml:space="preserve">
    <value>自动保护池平衡</value>
  </data>
  <data name="PoolsHeading" xml:space="preserve">
    <value>支持的池</value>
  </data>
  <data name="Zip32_Description" xml:space="preserve">
    <value>人类可读的“种子短语”解锁您的账户。</value>
  </data>
  <data name="Zip32_Title" xml:space="preserve">
    <value>ZIP-32 HD 钱包</value>
  </data>
</root>