#nullable enable
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Identifier.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Version.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.WriteKeyMaterial(System.Span<byte> destination) -> int
const Nerdbank.Cryptocurrencies.Bip32HDWallet.HardenedBit = 2147483648 -> uint
const Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.RecommendedAddressGapLimit = 20 -> uint
Nerdbank.Cryptocurrencies.Base58Check
Nerdbank.Cryptocurrencies.Bech32
Nerdbank.Cryptocurrencies.Bech32.Decode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data) -> (int TagLength, int DataLength)
Nerdbank.Cryptocurrencies.Bech32.Encode(System.ReadOnlySpan<char> tag, System.ReadOnlySpan<byte> data, System.Span<char> output) -> int
Nerdbank.Cryptocurrencies.Bech32.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out (int Tag, int Data) length) -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ChainCode.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ChildIndex.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DebuggerDisplay.get -> string!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Depth.get -> byte
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DerivationPath.init -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ExtendedKeyBase(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ParentFingerprint.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.WriteBytes(System.Span<byte> destination) -> int
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPrivKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Dispose() -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, System.ReadOnlySpan<byte> chainCode, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, System.ReadOnlySpan<byte> chainCode, System.ReadOnlySpan<byte> parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.PublicKey.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPubKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(NBitcoin.Secp256k1.ECPubKey! key, System.ReadOnlySpan<byte> chainCode, System.ReadOnlySpan<byte> parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Append(uint index) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.CompareTo(Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? other) -> int
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Index.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.IsHardened.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.IsRooted.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.KeyPath(uint index, Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? parent = null) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Length.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parent.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Steps.get -> System.Collections.Generic.IEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.this[uint level].get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Truncate(uint length) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Cryptocurrencies.Bip39Mnemonic
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Bip39Mnemonic(System.ReadOnlySpan<byte> entropy, System.ReadOnlyMemory<char> password = default(System.ReadOnlyMemory<char>)) -> void
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Entropy.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Password.get -> System.ReadOnlyMemory<char>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Seed.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.SeedPhrase.get -> string!
Nerdbank.Cryptocurrencies.Bip39Mnemonic.ToString(int words) -> string!
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change.ChangeAddressChain = 1 -> Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change.ReceivingAddressChain = 0 -> Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.BitUtilities
Nerdbank.Cryptocurrencies.Blake2B
Nerdbank.Cryptocurrencies.Blake2B.Blake2B() -> void
Nerdbank.Cryptocurrencies.Blake2B.Blake2B(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Config
Nerdbank.Cryptocurrencies.Blake2B.Config.Config() -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Finish(System.Span<byte> finalHash) -> int
Nerdbank.Cryptocurrencies.Blake2B.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Reset() -> void
Nerdbank.Cryptocurrencies.Blake2B.Reset(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Update(System.ReadOnlySpan<byte> data) -> void
Nerdbank.Cryptocurrencies.CompactSize
Nerdbank.Cryptocurrencies.CryptoUtilities
Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadPadding = 4 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadWordCount = 6 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BufferTooSmall = 2 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidCharacter = 0 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidChecksum = 1 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidDerivationData = 10 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidKey = 9 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidWord = 5 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.NoSeparator = 3 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnexpectedLength = 7 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnrecognizedVersion = 8 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodingReader
Nerdbank.Cryptocurrencies.DecodingReader.DecodingReader() -> void
Nerdbank.Cryptocurrencies.DecodingReader.DecodingReader(System.ReadOnlyMemory<byte> buffer) -> void
Nerdbank.Cryptocurrencies.DecodingReader.Read(int length) -> System.ReadOnlyMemory<byte>
Nerdbank.Cryptocurrencies.DecodingReader.Read(System.Span<byte> buffer) -> void
Nerdbank.Cryptocurrencies.DecodingReader.ReadByte() -> byte
Nerdbank.Cryptocurrencies.DecodingReader.ReadInt32Compact() -> int
Nerdbank.Cryptocurrencies.DecodingReader.ReadInt64LE() -> long
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt32LE() -> uint
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt64Compact() -> ulong
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt64LE() -> ulong
Nerdbank.Cryptocurrencies.DecodingReader.RemainingLength.get -> int
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.BinanceUSExchange(System.Net.Http.HttpClient! httpClient) -> void
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.Dispose() -> void
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.GetAvailableTradingPairsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Exchanges.TradingPair>!>
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.PricesAsOf.get -> System.DateTimeOffset?
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.RefreshPricesAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Basis.get -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Basis.set -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ExchangeRate() -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ExchangeRate(Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount Basis, Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount TradeInterest) -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.InBasisAmount.get -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.OppositeDirection.get -> Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.TradeInterest.get -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.TradeInterest.set -> void
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider.FindFirstSupportedTradingPairAsync(Nerdbank.Cryptocurrencies.Exchanges.Security! tradeInterest, System.Collections.Generic.IReadOnlyList<Nerdbank.Cryptocurrencies.Exchanges.Security!>! acceptableBases, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.TradingPair?>
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider.GetAvailableTradingPairsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Exchanges.TradingPair>!>
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.IHistoricalExchangeRateProvider
Nerdbank.Cryptocurrencies.Exchanges.IHistoricalExchangeRateProvider.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.DateTimeOffset when, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>!
Nerdbank.Cryptocurrencies.Exchanges.Security
Nerdbank.Cryptocurrencies.Exchanges.Security.Amount(decimal amount) -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.Security.Name.get -> string?
Nerdbank.Cryptocurrencies.Exchanges.Security.Name.init -> void
Nerdbank.Cryptocurrencies.Exchanges.Security.Precision.get -> int
Nerdbank.Cryptocurrencies.Exchanges.Security.Precision.init -> void
Nerdbank.Cryptocurrencies.Exchanges.Security.Security(string! TickerSymbol, string? Name = null, int Precision = 8) -> void
Nerdbank.Cryptocurrencies.Exchanges.Security.TickerSymbol.get -> string!
Nerdbank.Cryptocurrencies.Exchanges.Security.TickerSymbol.init -> void
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.Amount.get -> decimal
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.Amount.set -> void
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.Security.get -> Nerdbank.Cryptocurrencies.Exchanges.Security!
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.Security.set -> void
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.SecurityAmount() -> void
Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.SecurityAmount(decimal Amount, Nerdbank.Cryptocurrencies.Exchanges.Security! Security) -> void
Nerdbank.Cryptocurrencies.Exchanges.TradingPair
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.Basis.get -> Nerdbank.Cryptocurrencies.Exchanges.Security!
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.OppositeDirection.get -> Nerdbank.Cryptocurrencies.Exchanges.TradingPair
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradeInterest.get -> Nerdbank.Cryptocurrencies.Exchanges.Security!
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradingPair() -> void
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradingPair(Nerdbank.Cryptocurrencies.Exchanges.Security! basis, Nerdbank.Cryptocurrencies.Exchanges.Security! tradeInterest) -> void
Nerdbank.Cryptocurrencies.IExtendedKey
Nerdbank.Cryptocurrencies.IExtendedKey.ChildIndex.get -> uint
Nerdbank.Cryptocurrencies.IExtendedKey.Depth.get -> byte
Nerdbank.Cryptocurrencies.IExtendedKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.IExtendedKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
Nerdbank.Cryptocurrencies.IKey
Nerdbank.Cryptocurrencies.IKey.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.InvalidKeyException
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException() -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message, System.Exception? inner) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.init -> void
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ToString() -> string!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.ToString() -> string!
override Nerdbank.Cryptocurrencies.Bip39Mnemonic.ToString() -> string!
override Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ToString() -> string!
override Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.ToString() -> string!
override Nerdbank.Cryptocurrencies.Exchanges.TradingPair.ToString() -> string!
static Nerdbank.Cryptocurrencies.Base58Check.Decode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes) -> int
static Nerdbank.Cryptocurrencies.Base58Check.Encode(System.ReadOnlySpan<byte> payload, System.Span<char> chars) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxDecodedLength(int charCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxEncodedLength(int byteCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out int bytesWritten) -> bool
static Nerdbank.Cryptocurrencies.Bech32.GetDecodedLength(System.ReadOnlySpan<char> encoded) -> (int Tag, int Data)?
static Nerdbank.Cryptocurrencies.Bech32.GetEncodedLength(int tagLength, int dataLength) -> int
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Parse(System.ReadOnlySpan<char> extendedKeyEncoding) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.TryParse(System.ReadOnlySpan<char> extendedKeyEncoding, out Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase? result, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Create(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, bool testNet = false) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Create(System.ReadOnlySpan<byte> seed, bool testNet = false) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parse(System.ReadOnlySpan<char> path) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.TryParse(System.ReadOnlySpan<char> path, out Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? result) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits, string? password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits, System.ReadOnlyMemory<char> password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, string? password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, string? password, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account, Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change change, uint addressIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.DiscoverUsedAccountsAsync(uint coinType, System.Func<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.DiscoverUsedAddressesAsync(Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath! account, System.Func<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32BE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32LE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt64LE(System.ReadOnlySpan<byte> buffer) -> ulong
static Nerdbank.Cryptocurrencies.BitUtilities.WriteBE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash, in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Decode(System.ReadOnlySpan<byte> buffer, out ulong value) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Encode(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.CompactSize.GetEncodedLength(ulong value) -> int
static Nerdbank.Cryptocurrencies.CryptoUtilities.Derive<TKey>(this TKey! key, Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath! keyPath) -> TKey!
static Nerdbank.Cryptocurrencies.Exchanges.Security.WellKnown.get -> System.Collections.Immutable.ImmutableDictionary<string!, Nerdbank.Cryptocurrencies.Exchanges.Security!>!
static Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.operator +(Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount left, Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount right) -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
static Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.operator -(Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount left, Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount right) -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
static Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount.operator -(Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount right) -> Nerdbank.Cryptocurrencies.Exchanges.SecurityAmount
static readonly Nerdbank.Cryptocurrencies.Bech32.Bech32m -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bech32.Original -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Root -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ACM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ADA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.AEON -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ALGO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ARQ -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ARRR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ATOM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BAND -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BAT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BBS -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BCH -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BCHA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BCN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BEAM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BITC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BKC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BLOC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BNB -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BTC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BTCP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.BUSD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.CASH -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.CCX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.CIV -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.COAL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.COMP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.CUT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.D -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.DAI -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.DASH -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.DERO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.DOGE -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.EGLD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ENJ -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.EOS -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ERG -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ETC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ETH -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ETN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ETNX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ETNXP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.FBF -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.FIL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.FLUX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GHOST -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GPKR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GRFT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GRIMM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GRIN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.GRLC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.HBAR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.HNT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ICX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.INC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.INTU -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.IOTA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.IRD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.KNC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.KNCL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.KRB -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.LINK -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.LNS -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.LTC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.LTHN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.LUX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MANA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MAT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MATIC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MKR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MSR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.MWC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.NAH -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.NANO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.NBR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.NCP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.NEO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.OMB -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.OMG -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ONE -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ONION -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ONT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.OXEN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.OXT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PAXG -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PCN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PIVX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PLURA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.POT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PRCY -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.PURK -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.QTUM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.QUAN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.REP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.REPV1 -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.RTO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.RVN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.RYO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SHB -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SHIB -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SIN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SLD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SOL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SOLACE -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.STORJ -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.SUMO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.TRTL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.TUBE -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.UNI -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.UPX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.USD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.USDC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.USDT -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.VEIL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.VET -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.VTHO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.WAE -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.WAVES -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.WOW -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.WTIP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XAO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XEQ -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XGM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XGS -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XHV -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XLA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XLM -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XMC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XMR -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XMV -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XNV -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XPP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XRN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XRP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XTA -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XTNC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XTZ -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XUN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XUSD -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XVG -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.XWP -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ZANO -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ZEC -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ZEN -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ZIL -> Nerdbank.Cryptocurrencies.Exchanges.Security!
static readonly Nerdbank.Cryptocurrencies.Exchanges.Security.ZRX -> Nerdbank.Cryptocurrencies.Exchanges.Security!
