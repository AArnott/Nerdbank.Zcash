#nullable enable
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Identifier.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Version.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.WriteKeyMaterial(System.Span<byte> destination) -> int
const Nerdbank.Cryptocurrencies.Bip32HDWallet.HardenedBit = 2147483648 -> uint
const Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.RecommendedAddressGapLimit = 20 -> uint
Nerdbank.Cryptocurrencies.Base58Check
Nerdbank.Cryptocurrencies.Bech32
Nerdbank.Cryptocurrencies.Bech32.Decode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data) -> (int TagLength, int DataLength)
Nerdbank.Cryptocurrencies.Bech32.Encode(System.ReadOnlySpan<char> tag, System.ReadOnlySpan<byte> data, System.Span<char> output) -> int
Nerdbank.Cryptocurrencies.Bech32.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out (int Tag, int Data) length) -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ChainCode.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ChildIndex.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DebuggerDisplay.get -> string!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Depth.get -> byte
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.DerivationPath.init -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ExtendedKeyBase(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ParentFingerprint.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.WriteBytes(System.Span<byte> destination) -> int
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPrivKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Dispose() -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, System.ReadOnlySpan<byte> chainCode, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, System.ReadOnlySpan<byte> chainCode, System.ReadOnlySpan<byte> parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.PublicKey.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPubKey!
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(NBitcoin.Secp256k1.ECPubKey! key, System.ReadOnlySpan<byte> chainCode, System.ReadOnlySpan<byte> parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey! copyFrom) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Append(uint index) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.CompareTo(Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? other) -> int
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Index.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.IsHardened.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.IsRooted.get -> bool
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.KeyPath(uint index, Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? parent = null) -> void
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Length.get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parent.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Steps.get -> System.Collections.Generic.IEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.this[uint level].get -> uint
Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Truncate(uint length) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Cryptocurrencies.Bip39Mnemonic
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Bip39Mnemonic(System.ReadOnlySpan<byte> entropy, System.ReadOnlyMemory<char> password = default(System.ReadOnlyMemory<char>)) -> void
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Entropy.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Password.get -> System.ReadOnlyMemory<char>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.Seed.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Bip39Mnemonic.SeedPhrase.get -> string!
Nerdbank.Cryptocurrencies.Bip39Mnemonic.ToString(int words) -> string!
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change.ChangeAddressChain = 1 -> Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change.ReceivingAddressChain = 0 -> Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change
Nerdbank.Cryptocurrencies.BitUtilities
Nerdbank.Cryptocurrencies.Blake2B
Nerdbank.Cryptocurrencies.Blake2B.Blake2B() -> void
Nerdbank.Cryptocurrencies.Blake2B.Blake2B(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Config
Nerdbank.Cryptocurrencies.Blake2B.Config.Config() -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Finish(System.Span<byte> finalHash) -> int
Nerdbank.Cryptocurrencies.Blake2B.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Reset() -> void
Nerdbank.Cryptocurrencies.Blake2B.Reset(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Update(System.ReadOnlySpan<byte> data) -> void
Nerdbank.Cryptocurrencies.CompactSize
Nerdbank.Cryptocurrencies.CryptoUtilities
Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadPadding = 4 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadWordCount = 6 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BufferTooSmall = 2 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidCharacter = 0 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidChecksum = 1 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidDerivationData = 10 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidKey = 9 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidWord = 5 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.NoSeparator = 3 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnexpectedLength = 7 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnrecognizedVersion = 8 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.IExtendedKey
Nerdbank.Cryptocurrencies.IExtendedKey.ChildIndex.get -> uint
Nerdbank.Cryptocurrencies.IExtendedKey.Depth.get -> byte
Nerdbank.Cryptocurrencies.IExtendedKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.IExtendedKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
Nerdbank.Cryptocurrencies.IKey
Nerdbank.Cryptocurrencies.IKey.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.InvalidKeyException
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException() -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message, System.Exception? inner) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.init -> void
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.ToString() -> string!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey!
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.ToString() -> string!
override Nerdbank.Cryptocurrencies.Bip39Mnemonic.ToString() -> string!
static Nerdbank.Cryptocurrencies.Base58Check.Decode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes) -> int
static Nerdbank.Cryptocurrencies.Base58Check.Encode(System.ReadOnlySpan<byte> payload, System.Span<char> chars) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxDecodedLength(int charCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxEncodedLength(int byteCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out int bytesWritten) -> bool
static Nerdbank.Cryptocurrencies.Bech32.GetDecodedLength(System.ReadOnlySpan<char> encoded) -> (int Tag, int Data)?
static Nerdbank.Cryptocurrencies.Bech32.GetEncodedLength(int tagLength, int dataLength) -> int
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.Parse(System.ReadOnlySpan<char> extendedKeyEncoding) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase.TryParse(System.ReadOnlySpan<char> extendedKeyEncoding, out Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedKeyBase? result, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Create(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, bool testNet = false) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey.Create(System.ReadOnlySpan<byte> seed, bool testNet = false) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Parse(System.ReadOnlySpan<char> path) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.TryParse(System.ReadOnlySpan<char> path, out Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath? result) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits, string? password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Create(int entropyLengthInBits, System.ReadOnlyMemory<char> password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, string? password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password) -> Nerdbank.Cryptocurrencies.Bip39Mnemonic!
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, string? password, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password, out Nerdbank.Cryptocurrencies.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account, Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change change, uint addressIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.DiscoverUsedAccountsAsync(uint coinType, System.Func<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
static Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.DiscoverUsedAddressesAsync(Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath! account, System.Func<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!>!
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32BE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32LE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt64LE(System.ReadOnlySpan<byte> buffer) -> ulong
static Nerdbank.Cryptocurrencies.BitUtilities.WriteBE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash, in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Decode(System.ReadOnlySpan<byte> buffer, out ulong value) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Encode(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.CompactSize.GetEncodedLength(ulong value) -> int
static Nerdbank.Cryptocurrencies.CryptoUtilities.Derive<TKey>(this TKey! key, Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath! keyPath) -> TKey!
static readonly Nerdbank.Cryptocurrencies.Bech32.Bech32m -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bech32.Original -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath.Root -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
