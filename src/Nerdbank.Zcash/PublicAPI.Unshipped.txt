#nullable enable
abstract Nerdbank.Zcash.UnifiedAddress.Receivers.get -> System.Collections.Generic.IReadOnlyList<Nerdbank.Zcash.ZcashAddress!>!
abstract Nerdbank.Zcash.ZcashAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
abstract Nerdbank.Zcash.ZcashAddress.HasShieldedReceiver.get -> bool
abstract Nerdbank.Zcash.ZcashAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.DiversifierIndex
Nerdbank.Zcash.DiversifierIndex.DiversifierIndex() -> void
Nerdbank.Zcash.DiversifierIndex.DiversifierIndex(System.Numerics.BigInteger value) -> void
Nerdbank.Zcash.DiversifierIndex.DiversifierIndex(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Zcash.DiversifierIndex.DiversifierIndex(ulong value) -> void
Nerdbank.Zcash.DiversifierIndex.Equals(Nerdbank.Zcash.DiversifierIndex other) -> bool
Nerdbank.Zcash.DiversifierIndex.ToBigInteger() -> System.Numerics.BigInteger
Nerdbank.Zcash.DiversifierIndex.Value.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.IFullViewingKey
Nerdbank.Zcash.IFullViewingKey.IncomingViewingKey.get -> Nerdbank.Zcash.IIncomingViewingKey!
Nerdbank.Zcash.IIncomingViewingKey
Nerdbank.Zcash.IIncomingViewingKey.DefaultAddress.get -> Nerdbank.Zcash.ZcashAddress!
Nerdbank.Zcash.InvalidAddressException
Nerdbank.Zcash.InvalidAddressException.InvalidAddressException() -> void
Nerdbank.Zcash.InvalidAddressException.InvalidAddressException(string? message) -> void
Nerdbank.Zcash.InvalidAddressException.InvalidAddressException(string? message, System.Exception? inner) -> void
Nerdbank.Zcash.IPoolReceiver
Nerdbank.Zcash.IPoolReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.IPoolReceiver.EncodingLength.get -> int
Nerdbank.Zcash.IPoolReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.IPoolReceiver.UnifiedReceiverTypeCode.get -> byte
Nerdbank.Zcash.ISpendingKey
Nerdbank.Zcash.ISpendingKey.FullViewingKey.get -> Nerdbank.Zcash.IFullViewingKey!
Nerdbank.Zcash.IZcashKey
Nerdbank.Zcash.IZcashKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.LightWalletClient
Nerdbank.Zcash.LightWalletClient.BirthdayHeight.get -> ulong
Nerdbank.Zcash.LightWalletClient.Dispose() -> void
Nerdbank.Zcash.LightWalletClient.DownloadTransactionsAsync(System.IProgress<Nerdbank.Zcash.LightWalletClient.SyncProgress!>? progress, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Nerdbank.Zcash.LightWalletClient.SyncResult!>!
Nerdbank.Zcash.LightWalletClient.DownloadTransactionsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Nerdbank.Zcash.LightWalletClient.SyncResult!>!
Nerdbank.Zcash.LightWalletClient.GetDownloadedTransactions(uint startingBlock = 0) -> System.Collections.Generic.List<Nerdbank.Zcash.LightWalletClient.Transaction!>!
Nerdbank.Zcash.LightWalletClient.GetLatestBlockHeightAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<ulong>
Nerdbank.Zcash.LightWalletClient.GetPoolBalances() -> Nerdbank.Zcash.LightWalletClient.PoolBalances!
Nerdbank.Zcash.LightWalletClient.LastDownloadHeight.get -> ulong
Nerdbank.Zcash.LightWalletClient.LightWalletClient(System.Uri! serverUrl, Nerdbank.Zcash.ZcashAccount! account, string! walletPath, string! walletName, string! logName, bool watchMemPool) -> void
Nerdbank.Zcash.LightWalletClient.LightWalletClient(System.Uri! serverUrl, Nerdbank.Zcash.ZcashNetwork network, string! walletPath, string! walletName, string! logName, bool watchMemPool) -> void
Nerdbank.Zcash.LightWalletClient.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.LightWalletClient.PoolBalances
Nerdbank.Zcash.LightWalletClient.PoolBalances.Orchard.get -> Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance?
Nerdbank.Zcash.LightWalletClient.PoolBalances.Orchard.init -> void
Nerdbank.Zcash.LightWalletClient.PoolBalances.PoolBalances(decimal? TransparentBalance, Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance? Sapling, Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance? Orchard) -> void
Nerdbank.Zcash.LightWalletClient.PoolBalances.Sapling.get -> Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance?
Nerdbank.Zcash.LightWalletClient.PoolBalances.Sapling.init -> void
Nerdbank.Zcash.LightWalletClient.PoolBalances.TransparentBalance.get -> decimal?
Nerdbank.Zcash.LightWalletClient.PoolBalances.TransparentBalance.init -> void
Nerdbank.Zcash.LightWalletClient.SendAsync(System.Collections.Generic.IReadOnlyCollection<Nerdbank.Zcash.LightWalletClient.TransactionSendItem>! payments, System.IProgress<Nerdbank.Zcash.LightWalletClient.SendProgress!>? progress, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
Nerdbank.Zcash.LightWalletClient.SendProgress
Nerdbank.Zcash.LightWalletClient.SendProgress.Id.get -> uint
Nerdbank.Zcash.LightWalletClient.SendProgress.Id.init -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.IsSendInProgress.get -> bool
Nerdbank.Zcash.LightWalletClient.SendProgress.IsSendInProgress.init -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.LastError.get -> string?
Nerdbank.Zcash.LightWalletClient.SendProgress.LastError.init -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.LastTransactionId.get -> string?
Nerdbank.Zcash.LightWalletClient.SendProgress.LastTransactionId.init -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.Progress.get -> uint
Nerdbank.Zcash.LightWalletClient.SendProgress.Progress.init -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.SendProgress(uint Id, bool IsSendInProgress, uint Progress, uint Total, string? LastError, string? LastTransactionId) -> void
Nerdbank.Zcash.LightWalletClient.SendProgress.Total.get -> uint
Nerdbank.Zcash.LightWalletClient.SendProgress.Total.init -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.Balance.get -> decimal
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.Balance.init -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.ShieldedPoolBalance(decimal Balance, decimal VerifiedBalance, decimal UnverifiedBalance, decimal SpendableBalance) -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.ShieldedPoolBalance(ulong balance, ulong verified, ulong unverified, ulong spendable) -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.SpendableBalance.get -> decimal
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.SpendableBalance.init -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.UnverifiedBalance.get -> decimal
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.UnverifiedBalance.init -> void
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.VerifiedBalance.get -> decimal
Nerdbank.Zcash.LightWalletClient.ShieldedPoolBalance.VerifiedBalance.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress
Nerdbank.Zcash.LightWalletClient.SyncProgress.BatchNum.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.BatchNum.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.BatchTotal.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.BatchTotal.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.BlocksDone.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.BlocksDone.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.BlocksTotal.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.BlocksTotal.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.EndBlock.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.EndBlock.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.LastError.get -> string?
Nerdbank.Zcash.LightWalletClient.SyncProgress.LastError.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.StartBlock.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.StartBlock.init -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.SyncProgress(string? LastError, ulong StartBlock, ulong EndBlock, ulong BlocksDone, ulong TxnScanDone, ulong BlocksTotal, ulong BatchNum, ulong BatchTotal) -> void
Nerdbank.Zcash.LightWalletClient.SyncProgress.TxnScanDone.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncProgress.TxnScanDone.init -> void
Nerdbank.Zcash.LightWalletClient.SyncResult
Nerdbank.Zcash.LightWalletClient.SyncResult.LatestBlock.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncResult.LatestBlock.init -> void
Nerdbank.Zcash.LightWalletClient.SyncResult.Success.get -> bool
Nerdbank.Zcash.LightWalletClient.SyncResult.Success.init -> void
Nerdbank.Zcash.LightWalletClient.SyncResult.SyncResult(bool Success, ulong LatestBlock, ulong TotalBlocksScanned) -> void
Nerdbank.Zcash.LightWalletClient.SyncResult.TotalBlocksScanned.get -> ulong
Nerdbank.Zcash.LightWalletClient.SyncResult.TotalBlocksScanned.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction
Nerdbank.Zcash.LightWalletClient.Transaction.BlockNumber.get -> uint
Nerdbank.Zcash.LightWalletClient.Transaction.BlockNumber.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.Fee.get -> decimal
Nerdbank.Zcash.LightWalletClient.Transaction.IsIncoming.get -> bool
Nerdbank.Zcash.LightWalletClient.Transaction.IsIncoming.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.IsUnconfirmed.get -> bool
Nerdbank.Zcash.LightWalletClient.Transaction.IsUnconfirmed.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.NetChange.get -> decimal
Nerdbank.Zcash.LightWalletClient.Transaction.Notes.get -> System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.LightWalletClient.TransactionRecvItem>
Nerdbank.Zcash.LightWalletClient.Transaction.Notes.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.Received.get -> decimal
Nerdbank.Zcash.LightWalletClient.Transaction.Received.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.Sends.get -> System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.LightWalletClient.TransactionSendItem>
Nerdbank.Zcash.LightWalletClient.Transaction.Sends.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.Spent.get -> decimal
Nerdbank.Zcash.LightWalletClient.Transaction.Spent.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.Transaction(string! TransactionId, uint BlockNumber, System.DateTime When, bool IsUnconfirmed, decimal Spent, decimal Received, System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.LightWalletClient.TransactionSendItem> Sends, System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.LightWalletClient.TransactionRecvItem> Notes, bool IsIncoming) -> void
Nerdbank.Zcash.LightWalletClient.Transaction.TransactionId.get -> string!
Nerdbank.Zcash.LightWalletClient.Transaction.TransactionId.init -> void
Nerdbank.Zcash.LightWalletClient.Transaction.When.get -> System.DateTime
Nerdbank.Zcash.LightWalletClient.Transaction.When.init -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.Amount.get -> decimal
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.Amount.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.IsChange.get -> bool
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.IsChange.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.Memo.get -> Nerdbank.Zcash.Memo
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.Memo.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.ToAddress.get -> Nerdbank.Zcash.ZcashAddress!
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.ToAddress.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.TransactionRecvItem() -> void
Nerdbank.Zcash.LightWalletClient.TransactionRecvItem.TransactionRecvItem(Nerdbank.Zcash.ZcashAddress! ToAddress, decimal Amount, in Nerdbank.Zcash.Memo Memo, bool IsChange) -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.Amount.get -> decimal
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.Amount.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.Memo.get -> Nerdbank.Zcash.Memo
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.Memo.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.RecipientUA.get -> Nerdbank.Zcash.UnifiedAddress?
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.RecipientUA.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.ToAddress.get -> Nerdbank.Zcash.ZcashAddress!
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.ToAddress.set -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.TransactionSendItem() -> void
Nerdbank.Zcash.LightWalletClient.TransactionSendItem.TransactionSendItem(Nerdbank.Zcash.ZcashAddress! ToAddress, decimal Amount, in Nerdbank.Zcash.Memo Memo, Nerdbank.Zcash.UnifiedAddress? RecipientUA = null) -> void
Nerdbank.Zcash.LightWalletClient.UpdateFrequency.get -> System.TimeSpan
Nerdbank.Zcash.LightWalletClient.UpdateFrequency.set -> void
Nerdbank.Zcash.LightWalletException
Nerdbank.Zcash.LightWalletException.LightWalletException(string? message) -> void
Nerdbank.Zcash.LightWalletException.LightWalletException(string? message, System.Exception? innerException) -> void
Nerdbank.Zcash.ManagedLightWalletClient
Nerdbank.Zcash.ManagedLightWalletClient.Dispose() -> void
Nerdbank.Zcash.ManagedLightWalletClient.GetLatestBlockHeightAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<ulong>
Nerdbank.Zcash.ManagedLightWalletClient.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Memo
Nerdbank.Zcash.Memo.Clear() -> void
Nerdbank.Zcash.Memo.Equals(Nerdbank.Zcash.Memo other) -> bool
Nerdbank.Zcash.Memo.IsEmpty.get -> bool
Nerdbank.Zcash.Memo.Memo() -> void
Nerdbank.Zcash.Memo.Memo(System.ReadOnlySpan<byte> memoBytes) -> void
Nerdbank.Zcash.Memo.MemoFormat.get -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Memo.Message.get -> string?
Nerdbank.Zcash.Memo.Message.set -> void
Nerdbank.Zcash.Memo.ProprietaryData.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.Memo.ProprietaryData.set -> void
Nerdbank.Zcash.Memo.RawBytes.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.Orchard.FullViewingKey
Nerdbank.Zcash.Orchard.FullViewingKey.DeriveInternal() -> Nerdbank.Zcash.Orchard.FullViewingKey!
Nerdbank.Zcash.Orchard.FullViewingKey.Equals(Nerdbank.Zcash.Orchard.FullViewingKey? other) -> bool
Nerdbank.Zcash.Orchard.FullViewingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Orchard.IncomingViewingKey!
Nerdbank.Zcash.Orchard.FullViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Orchard.IncomingViewingKey
Nerdbank.Zcash.Orchard.IncomingViewingKey.CheckReceiver(Nerdbank.Zcash.OrchardReceiver receiver) -> bool
Nerdbank.Zcash.Orchard.IncomingViewingKey.CreateDefaultReceiver() -> Nerdbank.Zcash.OrchardReceiver
Nerdbank.Zcash.Orchard.IncomingViewingKey.CreateReceiver(Nerdbank.Zcash.DiversifierIndex diversifierIndex) -> Nerdbank.Zcash.OrchardReceiver
Nerdbank.Zcash.Orchard.IncomingViewingKey.DefaultAddress.get -> Nerdbank.Zcash.OrchardAddress!
Nerdbank.Zcash.Orchard.IncomingViewingKey.Equals(Nerdbank.Zcash.Orchard.IncomingViewingKey? other) -> bool
Nerdbank.Zcash.Orchard.IncomingViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Orchard.IncomingViewingKey.TryGetDiversifierIndex(Nerdbank.Zcash.OrchardReceiver receiver, out Nerdbank.Zcash.DiversifierIndex? diversifierIndex) -> bool
Nerdbank.Zcash.Orchard.SpendingKey
Nerdbank.Zcash.Orchard.SpendingKey.Encoded.get -> string!
Nerdbank.Zcash.Orchard.SpendingKey.FullViewingKey.get -> Nerdbank.Zcash.Orchard.FullViewingKey!
Nerdbank.Zcash.Orchard.SpendingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Orchard.IncomingViewingKey!
Nerdbank.Zcash.Orchard.SpendingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.OrchardAddress
Nerdbank.Zcash.OrchardAddress.OrchardAddress(in Nerdbank.Zcash.OrchardReceiver receiver, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.OrchardReceiver
Nerdbank.Zcash.OrchardReceiver.D.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.OrchardReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.OrchardReceiver.EncodingLength.get -> int
Nerdbank.Zcash.OrchardReceiver.OrchardReceiver() -> void
Nerdbank.Zcash.OrchardReceiver.OrchardReceiver(System.ReadOnlySpan<byte> d, System.ReadOnlySpan<byte> pkd) -> void
Nerdbank.Zcash.OrchardReceiver.Pkd.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.OrchardReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.OrchardReceiver.Span.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.InvalidAddress = 1 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.InvalidParam = 4 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.InvalidUri = 3 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.MissingRequiredParameter = 5 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.UnrecognizedAddressType = 0 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.UnrecognizedRequiredParameter = 6 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.ParseError.UnrecognizedScheme = 2 -> Nerdbank.Zcash.ParseError
Nerdbank.Zcash.Pool
Nerdbank.Zcash.Pool.Orchard = 3 -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.Pool.Sapling = 2 -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.Pool.Sprout = 1 -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.Pool.Transparent = 0 -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.RawTransaction
Nerdbank.Zcash.RawTransaction.ConsensusBranchId.get -> uint
Nerdbank.Zcash.RawTransaction.ConsensusBranchId.init -> void
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.Count.get -> int
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.Current.get -> T
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.Current.set -> void
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.DescriptionEnumerator() -> void
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.Dispose() -> void
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.MoveNext() -> bool
Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<T>.Reset() -> void
Nerdbank.Zcash.RawTransaction.ExpiryHeight.get -> uint
Nerdbank.Zcash.RawTransaction.ExpiryHeight.init -> void
Nerdbank.Zcash.RawTransaction.Header.get -> uint
Nerdbank.Zcash.RawTransaction.Header.init -> void
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Anchor.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Commitments.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.EncCiphertexts.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.EphemeralKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.JSDescriptionBCTV14() -> void
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.JSDescriptionBCTV14(ulong vpub_old, ulong vpub_new, System.ReadOnlyMemory<byte> anchor, System.ReadOnlyMemory<byte> nullifiers, System.ReadOnlyMemory<byte> commitments, System.ReadOnlyMemory<byte> ephemeralKey, System.ReadOnlyMemory<byte> randomSeed, System.ReadOnlyMemory<byte> vmacs, System.ReadOnlyMemory<byte> zkproof, System.ReadOnlyMemory<byte> encCiphertexts) -> void
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Nullifiers.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.RandomSeed.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Vmacs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.VpubNew.get -> ulong
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.VpubOld.get -> ulong
Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Zkproof.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Anchor.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Commitments.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.EncCiphertexts.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.EphemeralKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.JSDescriptionGroth16() -> void
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.JSDescriptionGroth16(ulong vpub_old, ulong vpub_new, System.ReadOnlyMemory<byte> anchor, System.ReadOnlyMemory<byte> nullifiers, System.ReadOnlyMemory<byte> commitments, System.ReadOnlyMemory<byte> ephemeralKey, System.ReadOnlyMemory<byte> randomSeed, System.ReadOnlyMemory<byte> vmacs, System.ReadOnlyMemory<byte> zkproof, System.ReadOnlyMemory<byte> encCiphertexts) -> void
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Nullifiers.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.RandomSeed.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Vmacs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.VpubNew.get -> ulong
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.VpubOld.get -> ulong
Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Zkproof.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.LockTime.get -> uint
Nerdbank.Zcash.RawTransaction.LockTime.init -> void
Nerdbank.Zcash.RawTransaction.Orchard.get -> Nerdbank.Zcash.RawTransaction.OrchardFields
Nerdbank.Zcash.RawTransaction.Orchard.init -> void
Nerdbank.Zcash.RawTransaction.OrchardAction
Nerdbank.Zcash.RawTransaction.OrchardAction.Cmx.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.EncryptedCiphertext.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.EphemeralKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.Nullifier.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.OrchardAction() -> void
Nerdbank.Zcash.RawTransaction.OrchardAction.OrchardAction(System.ReadOnlyMemory<byte> cv, System.ReadOnlyMemory<byte> nullifier, System.ReadOnlyMemory<byte> rk, System.ReadOnlyMemory<byte> cmx, System.ReadOnlyMemory<byte> ephemeralKey, System.ReadOnlyMemory<byte> encCiphertext, System.ReadOnlyMemory<byte> outCiphertext) -> void
Nerdbank.Zcash.RawTransaction.OrchardAction.OutCiphertext.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.Rk.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardAction.ValueCommitment.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardFields
Nerdbank.Zcash.RawTransaction.OrchardFields.Actions.get -> Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<Nerdbank.Zcash.RawTransaction.OrchardAction>
Nerdbank.Zcash.RawTransaction.OrchardFields.Actions.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.Anchor.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardFields.Anchor.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.BindingSig.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardFields.BindingSig.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.Flags.get -> Nerdbank.Zcash.RawTransaction.OrchardFlags
Nerdbank.Zcash.RawTransaction.OrchardFields.Flags.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.OrchardFields() -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.Proofs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardFields.Proofs.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.SpendAuthSigs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.OrchardFields.SpendAuthSigs.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFields.ValueBalance.get -> long
Nerdbank.Zcash.RawTransaction.OrchardFields.ValueBalance.init -> void
Nerdbank.Zcash.RawTransaction.OrchardFlags
Nerdbank.Zcash.RawTransaction.OrchardFlags.EnableOutputsOrchard = 2 -> Nerdbank.Zcash.RawTransaction.OrchardFlags
Nerdbank.Zcash.RawTransaction.OrchardFlags.EnableSpendsOrchard = 1 -> Nerdbank.Zcash.RawTransaction.OrchardFlags
Nerdbank.Zcash.RawTransaction.Overwintered.get -> bool
Nerdbank.Zcash.RawTransaction.RawTransaction() -> void
Nerdbank.Zcash.RawTransaction.Sapling.get -> Nerdbank.Zcash.RawTransaction.SaplingFields
Nerdbank.Zcash.RawTransaction.Sapling.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields
Nerdbank.Zcash.RawTransaction.SaplingFields.Anchor.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingFields.Anchor.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.BindingSig.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingFields.BindingSig.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.OutputProofsS.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingFields.OutputProofsS.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.Outputs.get -> Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<Nerdbank.Zcash.RawTransaction.SaplingOutputDescription>
Nerdbank.Zcash.RawTransaction.SaplingFields.Outputs.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.SaplingFields() -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.SpendAuthSigs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingFields.SpendAuthSigs.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.SpendProofs.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingFields.SpendProofs.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.Spends.get -> Nerdbank.Zcash.RawTransaction.DescriptionEnumerator<Nerdbank.Zcash.RawTransaction.SaplingSpendDescription>
Nerdbank.Zcash.RawTransaction.SaplingFields.Spends.init -> void
Nerdbank.Zcash.RawTransaction.SaplingFields.ValueBalance.get -> long
Nerdbank.Zcash.RawTransaction.SaplingFields.ValueBalance.init -> void
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.EncryptedCiphertext.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.EphemeralKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.NoteCommitmentUCoord.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.OutCiphertext.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.SaplingOutputDescription() -> void
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.SaplingOutputDescription(System.ReadOnlyMemory<byte> cv, System.ReadOnlyMemory<byte> cmu, System.ReadOnlyMemory<byte> ephemeralKey, System.ReadOnlyMemory<byte> encCiphertext, System.ReadOnlyMemory<byte> outCiphertext) -> void
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.SaplingOutputDescription(System.ReadOnlyMemory<byte> cv, System.ReadOnlyMemory<byte> cmu, System.ReadOnlyMemory<byte> ephemeralKey, System.ReadOnlyMemory<byte> encCiphertext, System.ReadOnlyMemory<byte> outCiphertext, System.ReadOnlyMemory<byte> zkproof) -> void
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.ValueCommitment.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.Version.get -> uint
Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.ZkProof.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.Anchor.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.Nullifier.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.SaplingSpendDescription() -> void
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.SaplingSpendDescription(System.ReadOnlyMemory<byte> cv, System.ReadOnlyMemory<byte> anchor, System.ReadOnlyMemory<byte> nullifier, System.ReadOnlyMemory<byte> rk, System.ReadOnlyMemory<byte> zkproof, System.ReadOnlyMemory<byte> spendAuthSig) -> void
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.SaplingSpendDescription(System.ReadOnlyMemory<byte> cv, System.ReadOnlyMemory<byte> nullifier, System.ReadOnlyMemory<byte> rk) -> void
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.SpendAuthSig.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.TransactionVersion.get -> uint
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.ValidatingKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.ValueCommitment.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.ZkProof.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.Sprout.get -> Nerdbank.Zcash.RawTransaction.SproutFields
Nerdbank.Zcash.RawTransaction.Sprout.init -> void
Nerdbank.Zcash.RawTransaction.SproutFields
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitBCTV14.get -> System.ReadOnlyMemory<Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14>
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitBCTV14.init -> void
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitGroth16.get -> System.ReadOnlyMemory<Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16>
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitGroth16.init -> void
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitPublicKey.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitPublicKey.init -> void
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitSig.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.RawTransaction.SproutFields.JoinSplitSig.init -> void
Nerdbank.Zcash.RawTransaction.SproutFields.SproutFields() -> void
Nerdbank.Zcash.RawTransaction.Transparent.get -> Nerdbank.Zcash.RawTransaction.TransparentFields
Nerdbank.Zcash.RawTransaction.Transparent.init -> void
Nerdbank.Zcash.RawTransaction.TransparentFields
Nerdbank.Zcash.RawTransaction.TransparentFields.Inputs.get -> System.ReadOnlyMemory<Nerdbank.Bitcoin.RawTransaction.TxIn>
Nerdbank.Zcash.RawTransaction.TransparentFields.Inputs.init -> void
Nerdbank.Zcash.RawTransaction.TransparentFields.Outputs.get -> System.ReadOnlyMemory<Nerdbank.Bitcoin.RawTransaction.TxOut>
Nerdbank.Zcash.RawTransaction.TransparentFields.Outputs.init -> void
Nerdbank.Zcash.RawTransaction.TransparentFields.TransparentFields() -> void
Nerdbank.Zcash.RawTransaction.Version.get -> uint
Nerdbank.Zcash.RawTransaction.VersionGroupId.get -> uint
Nerdbank.Zcash.RawTransaction.VersionGroupId.init -> void
Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey
Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.CheckReceiver(Nerdbank.Zcash.SaplingReceiver receiver) -> bool
Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.DeriveInternal() -> Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey!
Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.Equals(Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey? other) -> bool
Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.TryGetDiversifierIndex(Nerdbank.Zcash.SaplingReceiver receiver, out Nerdbank.Zcash.DiversifierIndex? diversifierIndex) -> bool
Nerdbank.Zcash.Sapling.ExpandedSpendingKey
Nerdbank.Zcash.Sapling.ExpandedSpendingKey.Equals(Nerdbank.Zcash.Sapling.ExpandedSpendingKey? other) -> bool
Nerdbank.Zcash.Sapling.ExpandedSpendingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Sapling.IncomingViewingKey!
Nerdbank.Zcash.Sapling.ExpandedSpendingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Sapling.FullViewingKey
Nerdbank.Zcash.Sapling.FullViewingKey.Encoded.get -> string!
Nerdbank.Zcash.Sapling.FullViewingKey.Equals(Nerdbank.Zcash.Sapling.FullViewingKey? other) -> bool
Nerdbank.Zcash.Sapling.FullViewingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Sapling.IncomingViewingKey!
Nerdbank.Zcash.Sapling.FullViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Sapling.IncomingViewingKey
Nerdbank.Zcash.Sapling.IncomingViewingKey.CheckReceiver(Nerdbank.Zcash.SaplingReceiver receiver) -> bool
Nerdbank.Zcash.Sapling.IncomingViewingKey.CreateDefaultReceiver() -> Nerdbank.Zcash.SaplingReceiver
Nerdbank.Zcash.Sapling.IncomingViewingKey.DefaultAddress.get -> Nerdbank.Zcash.SaplingAddress!
Nerdbank.Zcash.Sapling.IncomingViewingKey.Encoded.get -> string!
Nerdbank.Zcash.Sapling.IncomingViewingKey.Equals(Nerdbank.Zcash.Sapling.IncomingViewingKey? other) -> bool
Nerdbank.Zcash.Sapling.IncomingViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Sapling.IncomingViewingKey.TryCreateReceiver(ref Nerdbank.Zcash.DiversifierIndex diversifierIndex, out Nerdbank.Zcash.SaplingReceiver? receiver) -> bool
Nerdbank.Zcash.Sapling.IncomingViewingKey.TryGetDiversifierIndex(Nerdbank.Zcash.SaplingReceiver receiver, out Nerdbank.Zcash.DiversifierIndex? diversifierIndex) -> bool
Nerdbank.Zcash.SaplingAddress
Nerdbank.Zcash.SaplingAddress.SaplingAddress(in Nerdbank.Zcash.SaplingReceiver receiver, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.SaplingReceiver
Nerdbank.Zcash.SaplingReceiver.D.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SaplingReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.SaplingReceiver.EncodingLength.get -> int
Nerdbank.Zcash.SaplingReceiver.Pkd.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SaplingReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.SaplingReceiver.SaplingReceiver() -> void
Nerdbank.Zcash.SaplingReceiver.SaplingReceiver(System.ReadOnlySpan<byte> d, System.ReadOnlySpan<byte> pkd) -> void
Nerdbank.Zcash.SaplingReceiver.Span.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SproutAddress
Nerdbank.Zcash.SproutAddress.SproutAddress(in Nerdbank.Zcash.SproutReceiver receiver, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.SproutReceiver
Nerdbank.Zcash.SproutReceiver.Apk.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SproutReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.SproutReceiver.EncodingLength.get -> int
Nerdbank.Zcash.SproutReceiver.PkEnc.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SproutReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.SproutReceiver.Span.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.SproutReceiver.SproutReceiver() -> void
Nerdbank.Zcash.SproutReceiver.SproutReceiver(System.ReadOnlySpan<byte> apk, System.ReadOnlySpan<byte> pkEnc) -> void
Nerdbank.Zcash.TransparentAddress
Nerdbank.Zcash.TransparentAddress.TransparentAddress(string! address) -> void
Nerdbank.Zcash.TransparentP2PKHAddress
Nerdbank.Zcash.TransparentP2PKHAddress.TransparentP2PKHAddress(in Nerdbank.Zcash.TransparentP2PKHReceiver receiver, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.TransparentP2PKHReceiver
Nerdbank.Zcash.TransparentP2PKHReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.TransparentP2PKHReceiver.EncodingLength.get -> int
Nerdbank.Zcash.TransparentP2PKHReceiver.Equals(Nerdbank.Zcash.TransparentP2PKHReceiver other) -> bool
Nerdbank.Zcash.TransparentP2PKHReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.TransparentP2PKHReceiver.Span.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.TransparentP2PKHReceiver.TransparentP2PKHReceiver() -> void
Nerdbank.Zcash.TransparentP2PKHReceiver.TransparentP2PKHReceiver(Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey! publicKey) -> void
Nerdbank.Zcash.TransparentP2PKHReceiver.TransparentP2PKHReceiver(System.ReadOnlySpan<byte> p2pkh) -> void
Nerdbank.Zcash.TransparentP2PKHReceiver.ValidatingKeyHash.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.TransparentP2SHAddress
Nerdbank.Zcash.TransparentP2SHAddress.TransparentP2SHAddress(in Nerdbank.Zcash.TransparentP2SHReceiver receiver, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.TransparentP2SHReceiver
Nerdbank.Zcash.TransparentP2SHReceiver.Encode(System.Span<byte> buffer) -> int
Nerdbank.Zcash.TransparentP2SHReceiver.EncodingLength.get -> int
Nerdbank.Zcash.TransparentP2SHReceiver.Pool.get -> Nerdbank.Zcash.Pool
Nerdbank.Zcash.TransparentP2SHReceiver.ScriptHash.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.TransparentP2SHReceiver.Span.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.TransparentP2SHReceiver.TransparentP2SHReceiver() -> void
Nerdbank.Zcash.TransparentP2SHReceiver.TransparentP2SHReceiver(System.ReadOnlySpan<byte> p2sh) -> void
Nerdbank.Zcash.UnifiedAddress
Nerdbank.Zcash.UnifiedAddress.UnifiedAddress(string! address) -> void
Nerdbank.Zcash.UnifiedViewingKey
Nerdbank.Zcash.UnifiedViewingKey.DefaultAddress.get -> Nerdbank.Zcash.UnifiedAddress!
Nerdbank.Zcash.UnifiedViewingKey.Equals(Nerdbank.Zcash.UnifiedViewingKey? other) -> bool
Nerdbank.Zcash.UnifiedViewingKey.Full
Nerdbank.Zcash.UnifiedViewingKey.Full.GetEnumerator() -> System.Collections.Generic.IEnumerator<Nerdbank.Zcash.IFullViewingKey!>!
Nerdbank.Zcash.UnifiedViewingKey.Full.GetViewingKey<T>() -> T?
Nerdbank.Zcash.UnifiedViewingKey.Full.IncomingViewingKey.get -> Nerdbank.Zcash.UnifiedViewingKey.Incoming!
Nerdbank.Zcash.UnifiedViewingKey.GetEnumerator() -> System.Collections.Generic.IEnumerator<Nerdbank.Zcash.IIncomingViewingKey!>!
Nerdbank.Zcash.UnifiedViewingKey.GetViewingKey<T>() -> T?
Nerdbank.Zcash.UnifiedViewingKey.Incoming
Nerdbank.Zcash.UnifiedViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.UnifiedViewingKey.ViewingKey.get -> string!
Nerdbank.Zcash.ZcashAccount
Nerdbank.Zcash.ZcashAccount.AddressSendsToThisAcount(Nerdbank.Zcash.ZcashAddress! address) -> bool
Nerdbank.Zcash.ZcashAccount.BirthdayHeight.get -> ulong?
Nerdbank.Zcash.ZcashAccount.BirthdayHeight.init -> void
Nerdbank.Zcash.ZcashAccount.DefaultAddress.get -> Nerdbank.Zcash.UnifiedAddress!
Nerdbank.Zcash.ZcashAccount.FullViewing.get -> Nerdbank.Zcash.ZcashAccount.FullViewingKeys?
Nerdbank.Zcash.ZcashAccount.FullViewingKeys
Nerdbank.Zcash.ZcashAccount.FullViewingKeys.Internal.get -> Nerdbank.Zcash.ZcashAccount.InternalFullViewingKeys!
Nerdbank.Zcash.ZcashAccount.FullViewingKeys.Orchard.get -> Nerdbank.Zcash.Orchard.FullViewingKey?
Nerdbank.Zcash.ZcashAccount.FullViewingKeys.Sapling.get -> Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey?
Nerdbank.Zcash.ZcashAccount.FullViewingKeys.Transparent.get -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey?
Nerdbank.Zcash.ZcashAccount.FullViewingKeys.UnifiedKey.get -> Nerdbank.Zcash.UnifiedViewingKey.Full!
Nerdbank.Zcash.ZcashAccount.GetDiversifiedAddress() -> Nerdbank.Zcash.UnifiedAddress!
Nerdbank.Zcash.ZcashAccount.GetDiversifiedAddress(ref Nerdbank.Zcash.DiversifierIndex diversifierIndex) -> Nerdbank.Zcash.UnifiedAddress!
Nerdbank.Zcash.ZcashAccount.IncomingViewing.get -> Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys!
Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys
Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys.Orchard.get -> Nerdbank.Zcash.Orchard.IncomingViewingKey?
Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys.Sapling.get -> Nerdbank.Zcash.Sapling.IncomingViewingKey?
Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys.Transparent.get -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey?
Nerdbank.Zcash.ZcashAccount.IncomingViewingKeys.UnifiedKey.get -> Nerdbank.Zcash.UnifiedViewingKey.Incoming!
Nerdbank.Zcash.ZcashAccount.InternalFullViewingKeys
Nerdbank.Zcash.ZcashAccount.InternalFullViewingKeys.Orchard.get -> Nerdbank.Zcash.Orchard.FullViewingKey?
Nerdbank.Zcash.ZcashAccount.InternalFullViewingKeys.Sapling.get -> Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey?
Nerdbank.Zcash.ZcashAccount.InternalSpendingKeys
Nerdbank.Zcash.ZcashAccount.InternalSpendingKeys.Sapling.get -> Nerdbank.Zcash.Sapling.ExpandedSpendingKey?
Nerdbank.Zcash.ZcashAccount.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.ZcashAccount.Spending.get -> Nerdbank.Zcash.ZcashAccount.SpendingKeys?
Nerdbank.Zcash.ZcashAccount.SpendingKeys
Nerdbank.Zcash.ZcashAccount.SpendingKeys.Internal.get -> Nerdbank.Zcash.ZcashAccount.InternalSpendingKeys!
Nerdbank.Zcash.ZcashAccount.SpendingKeys.Orchard.get -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey?
Nerdbank.Zcash.ZcashAccount.SpendingKeys.Sapling.get -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey?
Nerdbank.Zcash.ZcashAccount.SpendingKeys.Transparent.get -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey?
Nerdbank.Zcash.ZcashAccount.ZcashAccount(Nerdbank.Zcash.UnifiedViewingKey! viewingKey) -> void
Nerdbank.Zcash.ZcashAccount.ZcashAccount(Nerdbank.Zcash.Zip32HDWallet! zip32, uint index = 0) -> void
Nerdbank.Zcash.ZcashAddress
Nerdbank.Zcash.ZcashAddress.Address.get -> string!
Nerdbank.Zcash.ZcashAddress.Equals(Nerdbank.Zcash.ZcashAddress? other) -> bool
Nerdbank.Zcash.ZcashAddress.ZcashAddress(string! address) -> void
Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.ZcashNetwork.MainNet = 0 -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.ZcashNetwork.TestNet = 1 -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip302MemoFormat
Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Zip302MemoFormat.MemoFormat.Message = 1 -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Zip302MemoFormat.MemoFormat.NoMemo = 0 -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Zip302MemoFormat.MemoFormat.ProprietaryData = 2 -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Zip302MemoFormat.MemoFormat.Reserved = 3 -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
Nerdbank.Zcash.Zip321PaymentRequestUris
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.PaymentRequest(Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails! payment) -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.PaymentRequest(System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails!> payments) -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.Payments.get -> System.Collections.Immutable.ImmutableArray<Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails!>
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.Payments.init -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Address.get -> Nerdbank.Zcash.ZcashAddress!
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Address.init -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Amount.get -> decimal?
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Amount.init -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Label.get -> string?
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Label.init -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Memo.get -> Nerdbank.Zcash.Memo
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Memo.set -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Message.get -> string?
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.Message.init -> void
Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequestDetails.PaymentRequestDetails(Nerdbank.Zcash.ZcashAddress! Address) -> void
Nerdbank.Zcash.Zip32HDWallet
Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.ChainCode.ChainCode() -> void
Nerdbank.Zcash.Zip32HDWallet.ChainCode.ChainCode(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Zcash.Zip32HDWallet.ChainCode.Value.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.Zip32HDWallet.CreateKeyPath(uint account) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Zcash.Zip32HDWallet.CreateKeyPath(uint account, uint addressIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Zcash.Zip32HDWallet.CreateOrchardAccount(uint account = 0) -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.CreateSaplingAccount(uint account = 0) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.CreateTransparentAccount(uint account = 0) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.CreateTransparentKeyPath(uint account) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Zcash.Zip32HDWallet.CreateTransparentKeyPath(uint account, Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change change, uint addressIndex) -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath!
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint.Equals(Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint other) -> bool
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint.FullViewingKeyFingerprint() -> void
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint.FullViewingKeyFingerprint(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint.Tag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint.Value.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag.FullViewingKeyTag() -> void
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag.FullViewingKeyTag(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag.Value.get -> System.ReadOnlySpan<byte>
Nerdbank.Zcash.Zip32HDWallet.IExtendedKey
Nerdbank.Zcash.Zip32HDWallet.IExtendedKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.IExtendedKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.IExtendedKey!
Nerdbank.Zcash.Zip32HDWallet.IExtendedKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.IExtendedKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Mnemonic.get -> Nerdbank.Cryptocurrencies.Bip39Mnemonic?
Nerdbank.Zcash.Zip32HDWallet.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Orchard
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.ChildIndex.get -> uint
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.DefaultAddress.get -> Nerdbank.Zcash.OrchardAddress!
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Depth.get -> byte
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.DerivationPath.init -> void
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Encoded.get -> string!
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Equals(Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey? other) -> bool
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.FullViewingKey.get -> Nerdbank.Zcash.Orchard.FullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Orchard.IncomingViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.SpendingKey.get -> Nerdbank.Zcash.Orchard.SpendingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.ChildIndex.get -> uint
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.DefaultAddress.get -> Nerdbank.Zcash.SaplingAddress!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Depth.get -> byte
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.DerivationPath.init -> void
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.DeriveInternal() -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Encoded.get -> string!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Equals(Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey? other) -> bool
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.FullViewingKey.get -> Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Sapling.IncomingViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.ChildIndex.get -> uint
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.DefaultAddress.get -> Nerdbank.Zcash.SaplingAddress!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Depth.get -> byte
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32HDWallet.KeyPath?
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.DerivationPath.init -> void
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.DeriveInternal() -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Encoded.get -> string!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Equals(Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey? other) -> bool
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.ExpandedSpendingKey.get -> Nerdbank.Zcash.Sapling.ExpandedSpendingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.ExtendedFullViewingKey.get -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.FullViewingKey.get -> Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Sapling.IncomingViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Seed.get -> System.ReadOnlyMemory<byte>
Nerdbank.Zcash.Zip32HDWallet.Transparent
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.DefaultAddress.get -> Nerdbank.Zcash.TransparentAddress!
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.Equals(Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey? other) -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.ExtendedSpendingKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPrivateKey! copyFrom, Nerdbank.Zcash.ZcashNetwork network) -> void
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.FullViewingKey.get -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.ChainCode.get -> Nerdbank.Zcash.Zip32HDWallet.ChainCode
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.CheckReceiver(Nerdbank.Zcash.TransparentP2PKHReceiver receiver, uint maxAddressIndex) -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.CheckReceiver(Nerdbank.Zcash.TransparentP2SHReceiver receiver, uint maxAddressIndex) -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.DefaultAddress.get -> Nerdbank.Zcash.TransparentAddress!
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.Equals(Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey? other) -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.ExtendedViewingKey(Nerdbank.Cryptocurrencies.Bip32HDWallet.ExtendedPublicKey! copyFrom, Nerdbank.Zcash.ZcashNetwork network) -> void
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.Fingerprint.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyFingerprint
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.GetReceiverIndex(uint index) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.IncomingViewingKey.get -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey!
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.IsFullViewingKey.get -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.Network.get -> Nerdbank.Zcash.ZcashNetwork
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.ParentFullViewingKeyTag.get -> Nerdbank.Zcash.Zip32HDWallet.FullViewingKeyTag
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.TryGetAddressIndex(Nerdbank.Zcash.TransparentP2PKHReceiver receiver, uint maxAddressIndex, out Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change? change, out uint? addressIndex) -> bool
Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.TryGetAddressIndex(Nerdbank.Zcash.TransparentP2SHReceiver receiver, uint maxAddressIndex, out Nerdbank.Cryptocurrencies.Bip44MultiAccountHD.Change? change, out uint? addressIndex) -> bool
Nerdbank.Zcash.Zip32HDWallet.Zip32HDWallet(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, Nerdbank.Zcash.ZcashNetwork network = Nerdbank.Zcash.ZcashNetwork.MainNet) -> void
Nerdbank.Zcash.Zip32HDWallet.Zip32HDWallet(System.ReadOnlySpan<byte> seed, Nerdbank.Zcash.ZcashNetwork network) -> void
override Nerdbank.Zcash.Memo.ToString() -> string!
override Nerdbank.Zcash.Orchard.FullViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Orchard.FullViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.Orchard.IncomingViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Orchard.IncomingViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.OrchardAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
override Nerdbank.Zcash.OrchardAddress.HasShieldedReceiver.get -> bool
override Nerdbank.Zcash.OrchardAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.OrchardAddress.Receivers.get -> System.Collections.Generic.IReadOnlyList<Nerdbank.Zcash.ZcashAddress!>!
override Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Sapling.DiversifiableFullViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.Sapling.FullViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Sapling.FullViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.Sapling.IncomingViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Sapling.IncomingViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.SaplingAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
override Nerdbank.Zcash.SaplingAddress.HasShieldedReceiver.get -> bool
override Nerdbank.Zcash.SaplingAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.SproutAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
override Nerdbank.Zcash.SproutAddress.HasShieldedReceiver.get -> bool
override Nerdbank.Zcash.SproutAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.TransparentP2PKHAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
override Nerdbank.Zcash.TransparentP2PKHAddress.HasShieldedReceiver.get -> bool
override Nerdbank.Zcash.TransparentP2PKHAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.TransparentP2SHAddress.GetPoolReceiver<TPoolReceiver>() -> TPoolReceiver?
override Nerdbank.Zcash.TransparentP2SHAddress.HasShieldedReceiver.get -> bool
override Nerdbank.Zcash.TransparentP2SHAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.UnifiedAddress.Network.get -> Nerdbank.Zcash.ZcashNetwork
override Nerdbank.Zcash.UnifiedViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.UnifiedViewingKey.GetHashCode() -> int
override Nerdbank.Zcash.UnifiedViewingKey.ToString() -> string!
override Nerdbank.Zcash.ZcashAddress.Equals(object? obj) -> bool
override Nerdbank.Zcash.ZcashAddress.GetHashCode() -> int
override Nerdbank.Zcash.ZcashAddress.ToString() -> string!
override Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.GetHashCode() -> int
override Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.ToString() -> string!
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey!
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey.GetHashCode() -> int
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.Derive(uint childIndex) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey!
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.Equals(object? obj) -> bool
override Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedViewingKey.GetHashCode() -> int
static Nerdbank.Zcash.DiversifierIndex.implicit operator Nerdbank.Zcash.DiversifierIndex(System.Numerics.BigInteger diversifierIndex) -> Nerdbank.Zcash.DiversifierIndex
static Nerdbank.Zcash.DiversifierIndex.implicit operator Nerdbank.Zcash.DiversifierIndex(ulong diversifierIndex) -> Nerdbank.Zcash.DiversifierIndex
static Nerdbank.Zcash.LightWalletClient.GetLatestBlockHeightAsync(System.Uri! lightWalletServerUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<ulong>
static Nerdbank.Zcash.ManagedLightWalletClient.CreateAsync(System.Uri! serverUrl, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Zcash.ManagedLightWalletClient!>
static Nerdbank.Zcash.Memo.FromMessage(string? message) -> Nerdbank.Zcash.Memo
static Nerdbank.Zcash.Memo.NoMemo.get -> Nerdbank.Zcash.Memo
static Nerdbank.Zcash.OrchardReceiver.UnifiedReceiverTypeCode.get -> byte
static Nerdbank.Zcash.RawTransaction.Decode(System.ReadOnlyMemory<byte> bytes) -> Nerdbank.Zcash.RawTransaction
static Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader, uint transactionVersion) -> Nerdbank.Zcash.RawTransaction.JSDescriptionBCTV14
static Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader, uint transactionVersion) -> Nerdbank.Zcash.RawTransaction.JSDescriptionGroth16
static Nerdbank.Zcash.RawTransaction.OrchardAction.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader, uint transactionVersion) -> Nerdbank.Zcash.RawTransaction.OrchardAction
static Nerdbank.Zcash.RawTransaction.SaplingOutputDescription.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader, uint transactionVersion) -> Nerdbank.Zcash.RawTransaction.SaplingOutputDescription
static Nerdbank.Zcash.RawTransaction.SaplingSpendDescription.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader, uint transactionVersion) -> Nerdbank.Zcash.RawTransaction.SaplingSpendDescription
static Nerdbank.Zcash.Sapling.FullViewingKey.FromEncoded(System.ReadOnlySpan<char> encoding) -> Nerdbank.Zcash.Sapling.FullViewingKey!
static Nerdbank.Zcash.Sapling.IncomingViewingKey.FromEncoded(System.ReadOnlySpan<char> encoding) -> Nerdbank.Zcash.Sapling.IncomingViewingKey!
static Nerdbank.Zcash.SaplingReceiver.UnifiedReceiverTypeCode.get -> byte
static Nerdbank.Zcash.SproutReceiver.UnifiedReceiverTypeCode.get -> byte
static Nerdbank.Zcash.TransparentP2PKHReceiver.UnifiedReceiverTypeCode.get -> byte
static Nerdbank.Zcash.TransparentP2SHReceiver.UnifiedReceiverTypeCode.get -> byte
static Nerdbank.Zcash.UnifiedAddress.Create(params Nerdbank.Zcash.ZcashAddress![]! receivers) -> Nerdbank.Zcash.UnifiedAddress!
static Nerdbank.Zcash.UnifiedAddress.Create(System.Collections.Generic.IReadOnlyCollection<Nerdbank.Zcash.ZcashAddress!>! receivers) -> Nerdbank.Zcash.UnifiedAddress!
static Nerdbank.Zcash.UnifiedViewingKey.Full.Create(params Nerdbank.Zcash.IFullViewingKey![]! viewingKeys) -> Nerdbank.Zcash.UnifiedViewingKey.Full!
static Nerdbank.Zcash.UnifiedViewingKey.Full.Create(System.Collections.Generic.IEnumerable<Nerdbank.Zcash.IFullViewingKey!>! viewingKeys) -> Nerdbank.Zcash.UnifiedViewingKey.Full!
static Nerdbank.Zcash.UnifiedViewingKey.implicit operator string?(Nerdbank.Zcash.UnifiedViewingKey? viewingKey) -> string?
static Nerdbank.Zcash.UnifiedViewingKey.Incoming.Create(params Nerdbank.Zcash.IIncomingViewingKey![]! viewingKeys) -> Nerdbank.Zcash.UnifiedViewingKey.Incoming!
static Nerdbank.Zcash.UnifiedViewingKey.Incoming.Create(System.Collections.Generic.IEnumerable<Nerdbank.Zcash.IIncomingViewingKey!>! viewingKeys) -> Nerdbank.Zcash.UnifiedViewingKey.Incoming!
static Nerdbank.Zcash.UnifiedViewingKey.Parse(string! unifiedViewingKey) -> Nerdbank.Zcash.UnifiedViewingKey!
static Nerdbank.Zcash.UnifiedViewingKey.TryParse(string! unifiedViewingKey, out Nerdbank.Zcash.UnifiedViewingKey? result) -> bool
static Nerdbank.Zcash.ZcashAddress.implicit operator string?(Nerdbank.Zcash.ZcashAddress? address) -> string?
static Nerdbank.Zcash.ZcashAddress.Parse(string! address) -> Nerdbank.Zcash.ZcashAddress!
static Nerdbank.Zcash.ZcashAddress.TryParse(string! address, out Nerdbank.Zcash.ZcashAddress? result) -> bool
static Nerdbank.Zcash.ZcashAddress.TryParse(string! address, out Nerdbank.Zcash.ZcashAddress? result, out Nerdbank.Zcash.ParseError? errorCode, out string? errorMessage) -> bool
static Nerdbank.Zcash.Zip302MemoFormat.DetectMemoFormat(System.ReadOnlySpan<byte> memo) -> Nerdbank.Zcash.Zip302MemoFormat.MemoFormat
static Nerdbank.Zcash.Zip302MemoFormat.EncodeMessage(System.ReadOnlySpan<char> text, System.Span<byte> memo) -> void
static Nerdbank.Zcash.Zip302MemoFormat.EncodeNoMemo(System.Span<byte> memo) -> void
static Nerdbank.Zcash.Zip302MemoFormat.EncodeProprietaryData(System.ReadOnlySpan<byte> data, System.Span<byte> memo) -> void
static Nerdbank.Zcash.Zip302MemoFormat.TryDecodeMessage(System.ReadOnlySpan<byte> memo, out string? text) -> bool
static Nerdbank.Zcash.Zip302MemoFormat.TryDecodeProprietaryData(System.ReadOnlySpan<byte> memo, System.Span<byte> data) -> bool
static Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.Parse(string! uri) -> Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest!
static Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.TryParse(string! uri, out Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest? paymentRequest) -> bool
static Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.TryParse(string! uri, out Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest? paymentRequest, out Nerdbank.Zcash.ParseError? errorCode, out string? errorMessage) -> bool
static Nerdbank.Zcash.Zip32HDWallet.Orchard.Create(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Orchard.Create(System.ReadOnlySpan<byte> seed, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey.FromEncoded(System.ReadOnlySpan<char> encoding) -> Nerdbank.Zcash.Zip32HDWallet.Orchard.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Sapling.Create(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Sapling.Create(System.ReadOnlySpan<byte> seed, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey.FromEncoded(System.ReadOnlySpan<char> encoding) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedFullViewingKey!
static Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey.FromEncoded(System.ReadOnlySpan<char> encoding) -> Nerdbank.Zcash.Zip32HDWallet.Sapling.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Transparent.Create(Nerdbank.Cryptocurrencies.Bip39Mnemonic! mnemonic, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey!
static Nerdbank.Zcash.Zip32HDWallet.Transparent.Create(System.ReadOnlySpan<byte> seed, Nerdbank.Zcash.ZcashNetwork network) -> Nerdbank.Zcash.Zip32HDWallet.Transparent.ExtendedSpendingKey!
virtual Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest.Equals(Nerdbank.Zcash.Zip321PaymentRequestUris.PaymentRequest? other) -> bool
